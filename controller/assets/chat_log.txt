You are a drone pilot and you should follow the user's instructions to generate a task plan for the drone. Your response should carefully consider the `system skills description`, the `scene description`, and the `task description`.
The `system skills description` describes the system's capabilities which include low-level and high-level skills. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built with our language `MiniSpec`, are more flexible and can be used to build more complex skills.

The BNF syntax definition of `MiniSpec` is as follows:
<program> ::= { <block-statement> [';'] | <statement> ';' }
<statement> ::= <function-call> | <return>
<block-statement> ::= <loop> | <conditional>
<loop> ::= <int> '{' <program> '}'
<function-call> ::= <variable-assign> | <function-name> ',' <argument>
<variable-assign> ::= <variable> '=' <function-name> ',' <argument>
<conditional> ::= '?' <condition> '{' <program> '}'
<return> ::= '->' <value>
<condition> ::= <variable> <comparator> <value> { '&' <condition> | '|' <condition> }
<comparator> ::= '>' | '<' | '==' | '!='
<function-name> ::= <alpha> { <alpha> }
<argument> ::= <value> { ',' <value> }
<variable> ::= '_' <int>
<value> ::= <int> | <float> | <string> | <bool>

Description of the two skill sets:
- High-level skills:
abbr:s,name:sweeping,definition:8{_1=iv,$1;?_1==True{->True}tc,45}->False,args:[object_name:str],description:Rotate to find a certain object
abbr:a,name:approach,definition:mf,120,args:[],description:Approach a certain object
abbr:o,name:orienting,definition:4{_1=ox,$1;?_1>0.6{tc,15};?_1<0.4{tu,15};_2=ox,$1;?_2<0.6&_2>0.4{->True}}->False,args:[object_name:str],description:Rotate to align with a certain object

- Low-level skills:
abbr:mf,name:move_forward,args:[distance:int],description:Move forward by a distance
abbr:mb,name:move_backward,args:[distance:int],description:Move backward by a distance
abbr:ml,name:move_left,args:[distance:int],description:Move left by a distance
abbr:mr,name:move_right,args:[distance:int],description:Move right by a distance
abbr:mu,name:move_up,args:[distance:int],description:Move up by a distance
abbr:md,name:move_down,args:[distance:int],description:Move down by a distance
abbr:tc,name:turn_cw,args:[degrees:int],description:Rotate clockwise by certain degrees
abbr:tu,name:turn_ccw,args:[degrees:int],description:Rotate counterclockwise by certain degrees
abbr:d,name:delay,args:[milliseconds:int],description:Wait for specified microseconds
abbr:iv,name:is_visible,args:[object_name:str],description:Check the visibility of target object
abbr:ox,name:object_x,args:[object_name:str],description:Get object's X-coordinate in (0,1)
abbr:oy,name:object_y,args:[object_name:str],description:Get object's Y-coordinate in (0,1)
abbr:ow,name:object_w,args:[object_name:str],description:Get object's width in (0,1)
abbr:oh,name:object_h,args:[object_name:str],description:Get object's height in (0,1)
abbr:l,name:log,args:[text:str],description:Output text to console
abbr:p,name:picture,args:[],description:Take a picture
abbr:q,name:query,args:[question:str],description:Query the LLM for reasoning


The `scene description` is an object list, containing their names with ID, location, and size (location and size are float between 0~1).
The `task description` is a natural language sentence, describing the user's instructions. It may start with "[A]" or "[Q]". "[A]" sentences mean you should generate an execution plan for the drone. "[Q]" sentences mean you should use `log` to show a literal answer at the end of the plan execution. Please carefully reason about the `task description`, you should interpret it and generate a detailed multi-step plan to achieve it as much as you can while following the rules below:
Reason about the scene and task, if a condition can be determined from the scene description, then directly generate the corresponding action.
Prioritize examining objects in the `scene description` as they relate directly to the `task description`.
Derive the `object_name` arguments or question answers from the `scene description` as much as possible. If not available with current scene, use `q,'question'` to derive the object_name later.
Prioritize the use of high-level skills whenever feasible.
You must call skills by their abbreviation and the `object_name` must be specific to the object type.
Assume `task description` uses common interpretation. E.g., "teddy" and "teddy bear" are synonymous and refer to the same target object. "something is a fruit" can be categorized under "something edible". But "something to drink" and "something to eat" pertain to distinct object categories.

Here is a list of example `response` for different `scene description` and `task description`, and their explanations:
Example 1:
    scene:[],task:[A] Find a bottle.
    response:_1=s,bottle;?_1==True{o,bottle;a}
    reason:no bottle instance in the scene, so we use sweeping to find bottle
Example 2:
    scene:[apple_5],task:[A] Find an apple.
    response:o,apple;a
    reason:there is an apple instance in the scene, so we orienting and approach the apple_5
Example 3:
    scene:[apple_3],task:[Q] Is there an apple?
    response:l,'Yes, there is an apple.'
    reason:we use log to output the answer
Example 4:
    scene:[chair_4 x:0.61, chair_13 x:0.23],task:[A] Find a chair on the left.
    response:o,chair_13;a
    reason:according to the x coordinate, the chair_13 is on the left, so we orienting and approach the chair_13
Example 5:
    scene:["chair_13", "laptop_2"],task:[A] Go to the chair behind you.
    response:tc,180;o,chair;a
    reason:the chair_13 is not the target because it's behind you. So we turn 180 degrees then orienting and approach the general object chair
Example 6:
    scene:["apple_1", "lemon_3", "bottle_2"],task:[A] Go to the yellow object.
    response:o,lemon_3;a
    reason:the lemon_3 is the yellow object, so we orienting and approach the lemon_3
Example 7:
    scene:["chair_3", "laptop_1", "bottle_5"],task:[A] Find and go any edible object.
    response:8{_1=q,'what's the edible target?';?_1!=False{o,_1;a;->True}tc,45}->False
    reason:there is no edible object in the scene, so we use sweeping and query to find the edible object
Example 8:
    scene:["laptop_4", "lemon_3"],task:[Q] Is there anything edible behind you?
    response:tcc,180;_1=q,'is there anything edible?';l,_1
    reason:the question is about the scene behind you, so we turn 180 degrees and query the edible object
Example 9:
    scene:["chair_3", "laptop_9"],task:[A] Turn around until you can see some animal.
    response:8{_1=q'what's the animal target?';?_1!=False{l,_1;->True}tc,45}->False
    reason:we use sweeping and query to find the animal
Example 10:
    scene:["chair_3", "laptop_9"],task:[Q] If you can see a chair, go find a person.
    response:_1=s,person;?_1==True{o,person;a}
    reason:From the scene, we can see a chair, so we use sweeping to find a person

Here are potential plans and error messages from your previous responses, if any (otherwise it will be empty), please read them carefully and try to generate a better response:
[]

Now given the following `scene description` and `task description`, please generate the response only with a single sentence of MiniSpec program.
`scene description`:
[]
`task description`:
[A] Can you find something for cutting paper on the table? The table is on your left.
`response`:
---
{"id": "chatcmpl-8N7kdjZ4OjgGhUezrWyAOyslXByUu", "object": "chat.completion", "created": 1700522031, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "tc,90;8{_1=q,'what's the object for cutting paper on the table?';?_1!=False{o,_1;a;->True}tc,45}->False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1975, "completion_tokens": 39, "total_tokens": 2014}}
---
You are a drone pilot and you should follow the user's instructions to generate a task plan for the drone. Your response should carefully consider the `system skills description`, the `scene description`, and the `task description`.
The `system skills description` describes the system's capabilities which include low-level and high-level skills. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built with our language `MiniSpec`, are more flexible and can be used to build more complex skills.

The BNF syntax definition of `MiniSpec` is as follows:
<program> ::= { <block-statement> [';'] | <statement> ';' }
<statement> ::= <function-call> | <return>
<block-statement> ::= <loop> | <conditional>
<loop> ::= <int> '{' <program> '}'
<function-call> ::= <variable-assign> | <function-name> ',' <argument>
<variable-assign> ::= <variable> '=' <function-name> ',' <argument>
<conditional> ::= '?' <condition> '{' <program> '}'
<return> ::= '->' <value>
<condition> ::= <variable> <comparator> <value> { '&' <condition> | '|' <condition> }
<comparator> ::= '>' | '<' | '==' | '!='
<function-name> ::= <alpha> { <alpha> }
<argument> ::= <value> { ',' <value> }
<variable> ::= '_' <int>
<value> ::= <int> | <float> | <string> | <bool>

Description of the two skill sets:
- High-level skills:
abbr:s,name:sweeping,definition:8{_1=iv,$1;?_1==True{->True}tc,45}->False,args:[object_name:str],description:Rotate to find a certain object
abbr:a,name:approach,definition:mf,120,args:[],description:Approach a certain object
abbr:o,name:orienting,definition:4{_1=ox,$1;?_1>0.6{tc,15};?_1<0.4{tu,15};_2=ox,$1;?_2<0.6&_2>0.4{->True}}->False,args:[object_name:str],description:Rotate to align with a certain object

- Low-level skills:
abbr:mf,name:move_forward,args:[distance:int],description:Move forward by a distance
abbr:mb,name:move_backward,args:[distance:int],description:Move backward by a distance
abbr:ml,name:move_left,args:[distance:int],description:Move left by a distance
abbr:mr,name:move_right,args:[distance:int],description:Move right by a distance
abbr:mu,name:move_up,args:[distance:int],description:Move up by a distance
abbr:md,name:move_down,args:[distance:int],description:Move down by a distance
abbr:tc,name:turn_cw,args:[degrees:int],description:Rotate clockwise by certain degrees
abbr:tu,name:turn_ccw,args:[degrees:int],description:Rotate counterclockwise by certain degrees
abbr:d,name:delay,args:[milliseconds:int],description:Wait for specified microseconds
abbr:iv,name:is_visible,args:[object_name:str],description:Check the visibility of target object
abbr:ox,name:object_x,args:[object_name:str],description:Get object's X-coordinate in (0,1)
abbr:oy,name:object_y,args:[object_name:str],description:Get object's Y-coordinate in (0,1)
abbr:ow,name:object_w,args:[object_name:str],description:Get object's width in (0,1)
abbr:oh,name:object_h,args:[object_name:str],description:Get object's height in (0,1)
abbr:l,name:log,args:[text:str],description:Output text to console
abbr:p,name:picture,args:[],description:Take a picture
abbr:q,name:query,args:[question:str],description:Query the LLM for reasoning


The `scene description` is an object list, containing their names with ID, location, and size (location and size are float between 0~1).
The `task description` is a natural language sentence, describing the user's instructions. It may start with "[A]" or "[Q]". "[A]" sentences mean you should generate an execution plan for the drone. "[Q]" sentences mean you should use `log` to show a literal answer at the end of the plan execution. Please carefully reason about the `task description`, you should interpret it and generate a detailed multi-step plan to achieve it as much as you can while following the rules below:
Reason about the scene and task, if a condition can be determined from the scene description, then directly generate the corresponding action.
Prioritize examining objects in the `scene description` as they relate directly to the `task description`.
Derive the `object_name` arguments or question answers from the `scene description` as much as possible. If not available with current scene, use `q,'question'` to derive the object_name later.
Prioritize the use of high-level skills whenever feasible.
You must call skills by their abbreviation and the `object_name` must be specific to the object type.
Assume `task description` uses common interpretation. E.g., "teddy" and "teddy bear" are synonymous and refer to the same target object. "something is a fruit" can be categorized under "something edible". But "something to drink" and "something to eat" pertain to distinct object categories.

Here is a list of example `response` for different `scene description` and `task description`, and their explanations:
Example 1:
    scene:[],task:[A] Find a bottle.
    response:_1=s,bottle;?_1==True{o,bottle;a}
    reason:no bottle instance in the scene, so we use sweeping to find bottle
Example 2:
    scene:[apple_5],task:[A] Find an apple.
    response:o,apple;a
    reason:there is an apple instance in the scene, so we orienting and approach the apple_5
Example 3:
    scene:[apple_3],task:[Q] Is there an apple?
    response:l,'Yes, there is an apple.'
    reason:we use log to output the answer
Example 4:
    scene:[chair_4 x:0.61, chair_13 x:0.23],task:[A] Find a chair on the left.
    response:o,chair_13;a
    reason:according to the x coordinate, the chair_13 is on the left, so we orienting and approach the chair_13
Example 5:
    scene:["chair_13", "laptop_2"],task:[A] Go to the chair behind you.
    response:tc,180;o,chair;a
    reason:the chair_13 is not the target because it's behind you. So we turn 180 degrees then orienting and approach the general object chair
Example 6:
    scene:["apple_1", "lemon_3", "bottle_2"],task:[A] Go to the yellow object.
    response:o,lemon_3;a
    reason:the lemon_3 is the yellow object, so we orienting and approach the lemon_3
Example 7:
    scene:["chair_3", "laptop_1", "bottle_5"],task:[A] Find and go any edible object.
    response:8{_1=q,'what's the edible target?';?_1!=False{o,_1;a;->True}tc,45}->False
    reason:there is no edible object in the scene, so we use sweeping and query to find the edible object
Example 8:
    scene:["laptop_4", "lemon_3"],task:[Q] Is there anything edible behind you?
    response:tcc,180;_1=q,'is there anything edible?';l,_1
    reason:the question is about the scene behind you, so we turn 180 degrees and query the edible object
Example 9:
    scene:["chair_3", "laptop_9"],task:[A] Turn around until you can see some animal.
    response:8{_1=q'what's the animal target?';?_1!=False{l,_1;->True}tc,45}->False
    reason:we use sweeping and query to find the animal
Example 10:
    scene:["chair_3", "laptop_9"],task:[Q] If you can see a chair, go find a person.
    response:_1=s,person;?_1==True{o,person;a}
    reason:From the scene, we can see a chair, so we use sweeping to find a person

Here are potential plans and error messages from your previous responses, if any (otherwise it will be empty), please read them carefully and try to generate a better response:
[]

Now given the following `scene description` and `task description`, please generate the response only with a single sentence of MiniSpec program.
`scene description`:
[]
`task description`:
[A] Can you find something for cutting paper on the table? The table is on your left.
`response`:
---
{"id": "chatcmpl-8N7kgWNKnH4Q8HCcqQAAvEEq0Yavx", "object": "chat.completion", "created": 1700522034, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "tc,90;8{_1=q,'what's the object for cutting paper on the table?';?_1!=False{o,_1;a;->True}tc,45}->False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1975, "completion_tokens": 39, "total_tokens": 2014}}
---
You are a drone pilot and you should follow the user's instructions to generate a task plan for the drone. Your response should carefully consider the `system skills description`, the `scene description`, and the `task description`.
The `system skills description` describes the system's capabilities which include low-level and high-level skills. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built with our language `MiniSpec`, are more flexible and can be used to build more complex skills.

The BNF syntax definition of `MiniSpec` is as follows:
<program> ::= { <block-statement> [';'] | <statement> ';' }
<statement> ::= <function-call> | <return>
<block-statement> ::= <loop> | <conditional>
<loop> ::= <int> '{' <program> '}'
<function-call> ::= <variable-assign> | <function-name> ',' <argument>
<variable-assign> ::= <variable> '=' <function-name> ',' <argument>
<conditional> ::= '?' <condition> '{' <program> '}'
<return> ::= '->' <value>
<condition> ::= <variable> <comparator> <value> { '&' <condition> | '|' <condition> }
<comparator> ::= '>' | '<' | '==' | '!='
<function-name> ::= <alpha> { <alpha> }
<argument> ::= <value> { ',' <value> }
<variable> ::= '_' <int>
<value> ::= <int> | <float> | <string> | <bool>

Description of the two skill sets:
- High-level skills:
abbr:s,name:sweeping,definition:8{_1=iv,$1;?_1==True{->True}tc,45}->False,args:[object_name:str],description:Rotate to find a certain object
abbr:a,name:approach,definition:mf,120,args:[],description:Approach a certain object
abbr:o,name:orienting,definition:4{_1=ox,$1;?_1>0.6{tc,15};?_1<0.4{tu,15};_2=ox,$1;?_2<0.6&_2>0.4{->True}}->False,args:[object_name:str],description:Rotate to align with a certain object

- Low-level skills:
abbr:mf,name:move_forward,args:[distance:int],description:Move forward by a distance
abbr:mb,name:move_backward,args:[distance:int],description:Move backward by a distance
abbr:ml,name:move_left,args:[distance:int],description:Move left by a distance
abbr:mr,name:move_right,args:[distance:int],description:Move right by a distance
abbr:mu,name:move_up,args:[distance:int],description:Move up by a distance
abbr:md,name:move_down,args:[distance:int],description:Move down by a distance
abbr:tc,name:turn_cw,args:[degrees:int],description:Rotate clockwise by certain degrees
abbr:tu,name:turn_ccw,args:[degrees:int],description:Rotate counterclockwise by certain degrees
abbr:d,name:delay,args:[milliseconds:int],description:Wait for specified microseconds
abbr:iv,name:is_visible,args:[object_name:str],description:Check the visibility of target object
abbr:ox,name:object_x,args:[object_name:str],description:Get object's X-coordinate in (0,1)
abbr:oy,name:object_y,args:[object_name:str],description:Get object's Y-coordinate in (0,1)
abbr:ow,name:object_w,args:[object_name:str],description:Get object's width in (0,1)
abbr:oh,name:object_h,args:[object_name:str],description:Get object's height in (0,1)
abbr:l,name:log,args:[text:str],description:Output text to console
abbr:p,name:picture,args:[],description:Take a picture
abbr:q,name:query,args:[question:str],description:Query the LLM for reasoning


The `scene description` is an object list, containing their names with ID, location, and size (location and size are float between 0~1).
The `task description` is a natural language sentence, describing the user's instructions. It may start with "[A]" or "[Q]". "[A]" sentences mean you should generate an execution plan for the drone. "[Q]" sentences mean you should use `log` to show a literal answer at the end of the plan execution. Please carefully reason about the `task description`, you should interpret it and generate a detailed multi-step plan to achieve it as much as you can while following the rules below:
Reason about the scene and task, if a condition can be determined from the scene description, then directly generate the corresponding action.
Prioritize examining objects in the `scene description` as they relate directly to the `task description`.
Derive the `object_name` arguments or question answers from the `scene description` as much as possible. If not available with current scene, use `q,'question'` to derive the object_name later.
Prioritize the use of high-level skills whenever feasible.
You must call skills by their abbreviation and the `object_name` must be specific to the object type.
Assume `task description` uses common interpretation. E.g., "teddy" and "teddy bear" are synonymous and refer to the same target object. "something is a fruit" can be categorized under "something edible". But "something to drink" and "something to eat" pertain to distinct object categories.

Here is a list of example `response` for different `scene description` and `task description`, and their explanations:
Example 1:
    scene:[],task:[A] Find a bottle.
    response:_1=s,bottle;?_1==True{o,bottle;a}
    reason:no bottle instance in the scene, so we use sweeping to find bottle
Example 2:
    scene:[apple_5],task:[A] Find an apple.
    response:o,apple;a
    reason:there is an apple instance in the scene, so we orienting and approach the apple_5
Example 3:
    scene:[apple_3],task:[Q] Is there an apple?
    response:l,'Yes, there is an apple.'
    reason:we use log to output the answer
Example 4:
    scene:[chair_4 x:0.61, chair_13 x:0.23],task:[A] Find a chair on the left.
    response:o,chair_13;a
    reason:according to the x coordinate, the chair_13 is on the left, so we orienting and approach the chair_13
Example 5:
    scene:["chair_13", "laptop_2"],task:[A] Go to the chair behind you.
    response:tc,180;o,chair;a
    reason:the chair_13 is not the target because it's behind you. So we turn 180 degrees then orienting and approach the general object chair
Example 6:
    scene:["apple_1", "lemon_3", "bottle_2"],task:[A] Go to the yellow object.
    response:o,lemon_3;a
    reason:the lemon_3 is the yellow object, so we orienting and approach the lemon_3
Example 7:
    scene:["chair_3", "laptop_1", "bottle_5"],task:[A] Find and go any edible object.
    response:8{_1=q,'what's the edible target?';?_1!=False{o,_1;a;->True}tc,45}->False
    reason:there is no edible object in the scene, so we use sweeping and query to find the edible object
Example 8:
    scene:["laptop_4", "lemon_3"],task:[Q] Is there anything edible behind you?
    response:tcc,180;_1=q,'is there anything edible?';l,_1
    reason:the question is about the scene behind you, so we turn 180 degrees and query the edible object
Example 9:
    scene:["chair_3", "laptop_9"],task:[A] Turn around until you can see some animal.
    response:8{_1=q'what's the animal target?';?_1!=False{l,_1;->True}tc,45}->False
    reason:we use sweeping and query to find the animal
Example 10:
    scene:["chair_3", "laptop_9"],task:[Q] If you can see a chair, go find a person.
    response:_1=s,person;?_1==True{o,person;a}
    reason:From the scene, we can see a chair, so we use sweeping to find a person

Here are potential plans and error messages from your previous responses, if any (otherwise it will be empty), please read them carefully and try to generate a better response:
[]

Now given the following `scene description` and `task description`, please generate the response only with a single sentence of MiniSpec program.
`scene description`:
[]
`task description`:
[A] Can you find something for cutting paper on the table? The table is on your left.
`response`:
---
{"id": "chatcmpl-8N7kjGlChKxP4gDNVgGrkRiKL1P3l", "object": "chat.completion", "created": 1700522037, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "tc,90;8{_1=q,'what's the object for cutting paper on the table?';?_1!=False{o,_1;a;->True}tc,45}->False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1975, "completion_tokens": 39, "total_tokens": 2014}}
---
