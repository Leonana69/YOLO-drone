You are a drone pilot and you should follow the user's instructions to generate a task plan for the drone. You response should carefully consider the `system skills desc.`, the `scene desc.`, and the `task desc.`.
The `system skills desc.` describes the system's capabilities which include low-level and high-level skills. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using our own language `MiniSpec`, are more flexible and can be used to build more complex skills.

The syntax of `MiniSpec` is as follows:
# Control block:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"print#text": Print the `text` to the console.
"ret#val": Return `val` as the return value of the current skill.

# Arguments:
"$1", "$2", "$3", ...: The arguments used by high-level skills, should be replaced when generating the program. If the specific argument cannot be determined at planning time, you can use `$?` as a special placeholder which represents the result of the last `exec` skill execution. Make sure the use of '$?' is following following a `exec` skill.


Desc. of the two skill sets:
- High-level skills:
name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,true#1', 'ret#true', 'exec#turn_cw,45', 'delay#300', 'ret#false'], args: [obj_name: str], comment: rotate to find a certain object
name: approach, skill_str_list: ['exec#move_forward,60'], args: [], comment: approach the object
name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'ret#true', 'ret#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone
name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'ret#true', 'ret#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down


- Low-level skills:
name: move_forward, args: [distance: int], comment: Move drone forward by a distance
name: move_backward, args: [distance: int], comment: Move drone backward by a distance
name: move_left, args: [distance: int], comment: Move drone left by a distance
name: move_right, args: [distance: int], comment: Move drone right by a distance
name: move_up, args: [distance: int], comment: Move drone up by a distance
name: move_down, args: [distance: int], comment: Move drone down by a distance
name: turn_ccw, args: [degree: int], comment: Turn drone counterclockwise by a degree
name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree
name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight
name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object
name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object
name: query, args: [question: str], comment: Query the LLM to check the environment state
name: verification, args: [retry: int], comment: Restart plan if task description has not been met


The `scene desc.` is an object list, containing their names with id, location and box size.
The `task desc.` is a natural language sentence, describing the user's instructions. It may start with "[A]" or "[Q]". "[A]" sentences mean you should generate an execution plan for the drone. "[Q]" sentences mean you should give a literal answer at the end of the plan execution. The `task desc.` is the goal of the task, you should interpret it and generate a detailed multi-step plan to achieve it as much as you can while following the rules below:
1. You should not generate any aggressive drone control.
2. Prioritize examining objects in the `scene description` as they relate directly to the `task description`.
3. Derive the `object_name` arguments or question answers from the `scene description` as much as possible. Only if when it's unavailable, carefully use `$?` and `exec#query,'question'` during execution.
4. Prioritize the employment of high-level skills whenever feasible.
5. If no proper high-level skill is available, try to generate a new high-level skill.
6. Assume `task description` uses common interpretation. E.g., "teddy" and "teddy bear" are synonymous and refer to the same target object. "something is a fruit" can be categorized under "something edible". But "something to drink" and "something to eat" pertain to distinct object categories.

Here is a list of example `response` for different `scene desc.` and `task desc.`, and their explanations:
1. scene: [], task: [A] find an apple.
response: if#scan,apple,=,True#2\nexec#orienting,apple\nexec#approach
2. scene: ["apple_5"], task: [A] find an apple.
response: exec#orienting,apple_5\nexec#approach
3. scene: ["apple_3"], task: [Q] is there an apple.
response: print#'Yes, there is an apple.'
4. scene: ["chair_4", "chair_13"], task: [A] find a chair on the left.
response: exec#orienting,chair_4\nexec#approach
5. scene: ["chair_13", "laptop_2"], task: [A] find a chair, please verify the chair is in the scene and retry up to 3 times.
response: exec#orienting,chair_13\nexec#approach\nexec#verification,3
6. scene: ["apple_1", "lemon_3", "bottle_2"], task: [A] go to the yellow object.
response: exec#orienting,lemon_3\nexec#approach
7. scene: ["chair_3", "laptop_1", "bottle_5"], task: [A] Find and go any edible object.
response: loop#8#6\nif#query,'is there anything edible?',=,true#4\nexec#query,'what's the name of the edible object'\nexec#orienting,$?\nexec#approach\nret#true\nexec#turn_cw,45\nret#false
8. scene: ["laptop_4", "lemon_3"], task: [Q] is there anything edible behind you?.
response: exec#turn_ccw,180\nexec#query,'is there anything edible?'\nprint#$?
9. scene: ["chair_3", "laptop_9"], task: [A] Turn around until you can see some animal..
response: loop#8#3\nif#query,'is there any animal?',=,true#1\nret#true\nexec#turn_cw,45\nret#false

Now given the following `scene desc.` and `task desc.`, please generate the response only with a single sentence of MiniSpec program and avoid over escaping for '\n'.
`scene desc.`:
['{name: person_135, loc_x: 0.57, loc_y: 0.61, size_x: 0.85, size_y: 0.77, color: dimgray}', '{name: chair_318, loc_x: 0.88, loc_y: 0.8, size_x: 0.1, size_y: 0.1, color: dimgray}', '{name: laptop_324, loc_x: 0.03, loc_y: 0.69, size_x: 0.06, size_y: 0.12, color: dimgray}']
`task desc.`:
[A] how many people are behind you?
---
{"id": "chatcmpl-8EMKWGp2AsY9H4kzj7sGhynWEkAXn", "object": "chat.completion", "created": 1698433120, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "exec#turn_ccw,180\\nexec#query,'how many people are there?'\\nprint#$?"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2057, "completion_tokens": 23, "total_tokens": 2080}}
---
Here I will provide you with a `scene description` and a question.
The `scene description` is an object list, containing their names and binding boxes.
The `question` is a yes-or-no question or an object identification question, or a general question. They are closely related to the `scene description`.
Kindly ensure your answer is either 'True' or 'False' for yes-or-no questions, object names for object identification questions, and a sentence for general questions.
`scene description`: ['{name: person_135, loc_x: 0.56, loc_y: 0.61, size_x: 0.87, size_y: 0.78, color: dimgray}', '{name: chair_318, loc_x: 0.88, loc_y: 0.8, size_x: 0.1, size_y: 0.1, color: dimgray}', '{name: laptop_324, loc_x: 0.03, loc_y: 0.69, size_x: 0.06, size_y: 0.12, color: dimgray}'],
`question`: 'how many people are there?'.
---
{"id": "chatcmpl-8EMKfXJXLo1SZotWTszbQduEwQL9y", "object": "chat.completion", "created": 1698433129, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "There is 1 person."}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 253, "completion_tokens": 6, "total_tokens": 259}}
---
