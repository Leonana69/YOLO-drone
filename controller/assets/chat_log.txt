You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'laptop', 'loc_x': 0.0, 'loc_y': 0.6, 'size_x': 0.05, 'size_y': 0.37}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[Q] is there a person insight?'}
##################################
{"id": "chatcmpl-86rYOtARXHW724QgTOH4gY8AU0YFw", "object": "chat.completion", "created": 1696646520, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#Yes, there is a person in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1508, "completion_tokens": 12, "total_tokens": 1520}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'laptop', 'loc_x': 0.0, 'loc_y': 0.6, 'size_x': 0.05, 'size_y': 0.37}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[Q] is there a person insight?'}
Response: ['str#Yes, there is a person in sight.']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}]

Is the user's command satisfied? Please generate the answer as a string command like ["str#Yes, there is an apple and a lemon in sight."]

##################################
{"id": "chatcmpl-86rYS5Aan4YIdyIAM1CsZugusJfI7", "object": "chat.completion", "created": 1696646524, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#Yes, there is a person in sight.\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1598, "completion_tokens": 12, "total_tokens": 1610}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[A] find something drinkable'}
##################################
{"id": "chatcmpl-86rYioMv1W4CQx8yAgFGk9pMrYLVf", "object": "chat.completion", "created": 1696646540, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1463, "completion_tokens": 8, "total_tokens": 1471}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.7, 'size_x': 0.5, 'size_y': 0.67}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[A] find something for drink'}
##################################
{"id": "chatcmpl-86rZ8BfZKssTmhmnkqEgXOMJmYObf", "object": "chat.completion", "created": 1696646566, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1463, "completion_tokens": 8, "total_tokens": 1471}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.7, 'size_x': 0.38, 'size_y': 0.6}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.09, 'size_y': 0.1}], 'text': '[A] find something for drink'}
##################################
{"id": "chatcmpl-86rcqrJAXLRG6UO4mmKWHwJEcwZph", "object": "chat.completion", "created": 1696646796, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1503, "completion_tokens": 8, "total_tokens": 1511}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.66, 'size_y': 0.76}, {'name': 'bottle', 'loc_x': 0.8, 'loc_y': 0.6, 'size_x': 0.15, 'size_y': 0.79}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-86rdFDZjGaqSjzNabd2lXcLE7iscP", "object": "chat.completion", "created": 1696646821, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 186, "completion_tokens": 1, "total_tokens": 187}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.68, 'size_y': 0.88}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.9, 'size_x': 0.25, 'size_y': 0.26}, {'name': 'person', 'loc_x': 0.7, 'loc_y': 0.7, 'size_x': 0.04, 'size_y': 0.08}], 'text': '[A] find something to eat'}
##################################
{"id": "chatcmpl-86riPdD5pn0oRvwuxjJuZ71CTNSXn", "object": "chat.completion", "created": 1696647141, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1542, "completion_tokens": 8, "total_tokens": 1550}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.87}, {'name': 'donut', 'loc_x': 0.6, 'loc_y': 0.7, 'size_x': 0.15, 'size_y': 0.29}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-86rireiC0gigY3obxE42Al7KkViFo", "object": "chat.completion", "created": 1696647169, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "True"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 186, "completion_tokens": 1, "total_tokens": 187}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.68, 'size_y': 0.88}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.9, 'size_x': 0.25, 'size_y': 0.26}, {'name': 'person', 'loc_x': 0.7, 'loc_y': 0.7, 'size_x': 0.04, 'size_y': 0.08}], 'text': '[A] find something to eat'}
Response: ['exec#find_edible_obj']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.86}, {'name': 'donut', 'loc_x': 0.6, 'loc_y': 0.7, 'size_x': 0.15, 'size_y': 0.24}, {'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.3, 'size_y': 0.46}]

Is the user's command satisfied?

##################################
{"id": "chatcmpl-86ritH5kKvm41EZPeLORiv1zWg2XD", "object": "chat.completion", "created": 1696647171, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "Yes"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1688, "completion_tokens": 1, "total_tokens": 1689}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rmskcX5dcE33PIqiYWideJhx9rL", "object": "chat.completion", "created": 1696647418, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 9, "total_tokens": 1552}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}, {'name': 'chair', 'loc_x': 0.7, 'loc_y': 0.9, 'size_x': 0.23, 'size_y': 0.25}]

Is the user's command satisfied? Please answer the question in the following format:
['result': True/False, 'feedback': 'your feedback'].

##################################
{"id": "chatcmpl-86rmv86Dxw72gApmHpoFnDEkIzZHP", "object": "chat.completion", "created": 1696647421, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['result': True, 'feedback': 'The drone successfully executed the command to turn around.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1758, "completion_tokens": 19, "total_tokens": 1777}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rncmLkKru9g5RDIITPVjCgoru1P", "object": "chat.completion", "created": 1696647464, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['loop#8#2', 'exec#turn_ccw,45']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 16, "total_tokens": 1559}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.66, 'size_y': 0.86}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86roMar8qsisLANmYEzO9BIbcSIBm", "object": "chat.completion", "created": 1696647510, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1501, "completion_tokens": 9, "total_tokens": 1510}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.63, 'size_y': 0.86}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] \x1b[A'}
##################################
{"id": "chatcmpl-86rotS2fUhEdnK3QnZMsUd5zXOLPd", "object": "chat.completion", "created": 1696647543, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "The user's command seems to be incomplete or corrupted as '[A] \\x1b[A' doesn't provide any clear instruction. In this case, the drone should ask for clarification. The response should be: ['str#Could you please provide more details or clarify your command?']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1546, "completion_tokens": 58, "total_tokens": 1604}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.65, 'size_y': 0.86}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rp5YH0g8I9XESebvPnAtj9dk823", "object": "chat.completion", "created": 1696647555, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 9, "total_tokens": 1552}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rqC46i9qQBjCUpfImiEFzcDdOuJ", "object": "chat.completion", "created": 1696647624, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1456, "completion_tokens": 9, "total_tokens": 1465}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.64, 'size_y': 0.87}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-86rqEUncncvI8IGpo0cdaDEw8vmbX", "object": "chat.completion", "created": 1696647626, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command to turn around.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1541, "completion_tokens": 20, "total_tokens": 1561}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.57, 'size_x': 0.64, 'size_y': 0.84}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872faqM7GRFdFy5qH1wEHlM6P7COj", "object": "chat.completion", "created": 1696689250, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "Response: ['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1456, "completion_tokens": 11, "total_tokens": 1467}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.57, 'size_x': 0.64, 'size_y': 0.83}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872fpbU34TQcCnX3AvO2SYI70MiUk", "object": "chat.completion", "created": 1696689265, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1456, "completion_tokens": 9, "total_tokens": 1465}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.57, 'size_x': 0.64, 'size_y': 0.83}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.57, 'size_x': 0.62, 'size_y': 0.83}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-872fuUeBB151Jc855yfHjmPiZcJaP", "object": "chat.completion", "created": 1696689270, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command to turn around.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1541, "completion_tokens": 20, "total_tokens": 1561}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.57, 'size_x': 0.62, 'size_y': 0.83}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872fwF4nI4wUfpqw8D9X6hi5TG7S5", "object": "chat.completion", "created": 1696689272, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "Response: ['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1456, "completion_tokens": 11, "total_tokens": 1467}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the following user's query, please generate the response string only. The response should in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.6, 'size_x': 0.59, 'size_y': 0.8}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.93, 'size_x': 0.2, 'size_y': 0.15}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872ioio7A9BAptMQToN6m7wGENcs2", "object": "chat.completion", "created": 1696689450, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1505, "completion_tokens": 9, "total_tokens": 1514}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.6, 'size_x': 0.59, 'size_y': 0.8}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.93, 'size_x': 0.2, 'size_y': 0.15}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.59, 'size_x': 0.57, 'size_y': 0.79}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.93, 'size_x': 0.2, 'size_y': 0.15}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-872iunldQHdOnFYMwKTTUoXp6pyCS", "object": "chat.completion", "created": 1696689456, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command to turn around.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1625, "completion_tokens": 20, "total_tokens": 1645}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the following user's query, please generate the response string only. The response should in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.59, 'size_x': 0.58, 'size_y': 0.79}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.93, 'size_x': 0.2, 'size_y': 0.15}, {'name': 'person', 'loc_x': 0.69, 'loc_y': 0.79, 'size_x': 0.05, 'size_y': 0.06}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872iwIzeMsFs6NtnGr6YOVGWgYUAQ", "object": "chat.completion", "created": 1696689458, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1547, "completion_tokens": 9, "total_tokens": 1556}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the following user's query, please generate the response string only. The response should in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.8}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.92, 'size_x': 0.2, 'size_y': 0.14}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-872kXq0FAlLvSLFa3llxdmSRMexdU", "object": "chat.completion", "created": 1696689557, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1505, "completion_tokens": 9, "total_tokens": 1514}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.8}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.92, 'size_x': 0.2, 'size_y': 0.14}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.59, 'size_x': 0.57, 'size_y': 0.79}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.93, 'size_x': 0.2, 'size_y': 0.15}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-872kalbEvBxXogBfEVxzQJW2j2Jbd", "object": "chat.completion", "created": 1696689560, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command to turn around.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1625, "completion_tokens": 20, "total_tokens": 1645}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the following user's query, please generate the response string only. The response should in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.55, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.77}, {'name': 'laptop', 'loc_x': 0.09, 'loc_y': 0.86, 'size_x': 0.09, 'size_y': 0.13}], 'text': '[A] turn around and go find a chair'}
##################################
{"id": "chatcmpl-87k22EAiGzI0ZFunNJ3v79cWjp5i7", "object": "chat.completion", "created": 1696855934, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1511, "completion_tokens": 38, "total_tokens": 1549}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.59, 'size_x': 0.58, 'size_y': 0.79}], 'text': '[A] Move up and down search the cabin in front of you for anything that looks like a human.'}
##################################
{"id": "chatcmpl-88AqB8zqasXMseDnXAjlgegQ26sde", "object": "chat.completion", "created": 1696958987, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find,person', 'if#find,person,=,True#3', 'exec#orienting,person', 'exec#centering_y,person', 'exec#move_forward,50', 'exec#move_backward,50', 'exec#move_up,20', 'exec#move_down,20']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1538, "completion_tokens": 69, "total_tokens": 1607}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.55, 'loc_y': 0.59, 'size_x': 0.72, 'size_y': 0.8}], 'text': '[A] is there a person behind you?'}
##################################
{"id": "chatcmpl-88ArPUDdIcWe2eFjdQssDEByscls6", "object": "chat.completion", "created": 1696959063, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1526, "completion_tokens": 38, "total_tokens": 1564}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.55, 'loc_y': 0.59, 'size_x': 0.71, 'size_y': 0.8}, {'name': 'sink', 'loc_x': 0.06, 'loc_y': 0.98, 'size_x': 0.11, 'size_y': 0.04}], 'text': '[A] is there a person behind you?'}
##################################
{"id": "chatcmpl-88As4f8QNfcXTp9JbAbDF3z4XZJQM", "object": "chat.completion", "created": 1696959104, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1568, "completion_tokens": 38, "total_tokens": 1606}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.54, 'loc_y': 0.58, 'size_x': 0.7, 'size_y': 0.81}], 'text': '[Q] is there a person behind you?'}
##################################
{"id": "chatcmpl-88AsZfAldVU8rPy3N7iGtfEvf4qQ8", "object": "chat.completion", "created": 1696959135, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#No, the person is in front of me.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1526, "completion_tokens": 13, "total_tokens": 1539}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.54, 'loc_y': 0.58, 'size_x': 0.7, 'size_y': 0.81}], 'text': '[Q] is there a person behind you?'}
Response: ['str#No, the person is in front of me.']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.55, 'loc_y': 0.58, 'size_x': 0.72, 'size_y': 0.81}, {'name': 'person', 'loc_x': 0.84, 'loc_y': 0.74, 'size_x': 0.07, 'size_y': 0.4}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-88Asq3vnRVBSRAc5wXV2agKh07L7x", "object": "chat.completion", "created": 1696959152, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The command is satisfied. The drone correctly identified that the person is in front of it, not behind.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1650, "completion_tokens": 31, "total_tokens": 1681}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.51, 'loc_y': 0.55, 'size_x': 0.66, 'size_y': 0.88}], 'text': '[A] turn around and tell me if there is a person?'}
##################################
{"id": "chatcmpl-88B18KnCCpuC84uOq4vwXVqFER5Qi", "object": "chat.completion", "created": 1696959666, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['if#find,person,=,True#2', 'str#Yes, there is a person.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1530, "completion_tokens": 23, "total_tokens": 1553}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.56, 'size_x': 0.63, 'size_y': 0.86}], 'text': '[A] turn around first, then tell me if there is a person'}
##################################
{"id": "chatcmpl-88B1ROIySjekIBnwFX9j9K0R3tQgK", "object": "chat.completion", "created": 1696959685, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,360', 'if#find,person,=,True#2', 'str#Yes, there is a person.', 'str#No, there is no person.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1531, "completion_tokens": 42, "total_tokens": 1573}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.52, 'loc_y': 0.56, 'size_x': 0.63, 'size_y': 0.86}], 'text': '[A] turn around first, then tell me if there is a person'}
Response: ['exec#turn_ccw,360', 'if#find,person,=,True#2', 'str#Yes, there is a person.', 'str#No, there is no person.']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.48, 'loc_y': 0.56, 'size_x': 0.66, 'size_y': 0.85}, {'name': 'tie', 'loc_x': 0.47, 'loc_y': 0.91, 'size_x': 0.06, 'size_y': 0.19}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-88B1uufWgC6pNRMPDD0EK7rFGAlNG", "object": "chat.completion", "created": 1696959714, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command by turning around and then checking if there is a person.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1684, "completion_tokens": 28, "total_tokens": 1712}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.49, 'loc_y': 0.56, 'size_x': 0.65, 'size_y': 0.85}], 'text': '[A] turn around first, then tell me if there is a person behind you'}
##################################
{"id": "chatcmpl-88B2LjgkU9P9gpIq1257ykE0mOvEY", "object": "chat.completion", "created": 1696959741, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'str#Yes, there is a person behind me.', 'str#No, there is no person behind me.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1533, "completion_tokens": 46, "total_tokens": 1579}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.77}], 'text': '[A] is there a person behind you?'}
##################################
{"id": "chatcmpl-88B8TrWuuqvYjngkt9E0NBR3aGpuE", "object": "chat.completion", "created": 1696960121, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1569, "completion_tokens": 38, "total_tokens": 1607}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.54, 'loc_y': 0.6, 'size_x': 0.61, 'size_y': 0.77}, {'name': 'bowl', 'loc_x': 0.21, 'loc_y': 0.97, 'size_x': 0.09, 'size_y': 0.07}], 'text': '[Q] is there a person behind you?'}
##################################
{"id": "chatcmpl-88B96n0PJG2EZCHhntYtnspkx2W8U", "object": "chat.completion", "created": 1696960160, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'str#Yes, there is a person behind me.', 'str#No, there is no person behind me.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1612, "completion_tokens": 46, "total_tokens": 1658}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.59, 'loc_y': 0.55, 'size_x': 0.76, 'size_y': 0.87}, {'name': 'tie', 'loc_x': 0.49, 'loc_y': 0.91, 'size_x': 0.08, 'size_y': 0.19}], 'text': "[A] find something to drink and tell me what's it."}
##################################
{"id": "chatcmpl-88BPNFtHP6vfjzbJwJUysXAopZx25", "object": "chat.completion", "created": 1696961169, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"loop#8#3\", \"if#query,'is there anything to drink?',=,True#1\", \"return#true\", \"exec#turn_ccw,45\", \"return#false\", \"str#There is nothing to drink in sight.\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1615, "completion_tokens": 54, "total_tokens": 1669}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.57, 'size_x': 0.64, 'size_y': 0.84}], 'text': '[A] find something to drink and tell me the name of it'}
##################################
{"id": "chatcmpl-88BQ8wowZYQZeUtiOk1nw4sU0D6w1", "object": "chat.completion", "created": 1696961216, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['loop#8#3', \"if#query,'is there anything to drink?',=,True#1\", 'return#true', 'exec#turn_ccw,45', 'return#false', 'str#I found a drink.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1573, "completion_tokens": 51, "total_tokens": 1624}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.55, 'loc_y': 0.54, 'size_x': 0.7, 'size_y': 0.9}], 'text': '[A] find something to drink and tell me the name'}
##################################
{"id": "chatcmpl-88BZJo4gWf9xoXg9FiYiDrXX9CpQ6", "object": "chat.completion", "created": 1696961785, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"loop#8#3\", \"if#query,'is there anything to drink?',=,True#1\", \"str#query,'what is the name of the drink?'\", \"exec#turn_ccw,45\", \"str#'Sorry, I cannot find anything to drink.'\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1871, "completion_tokens": 60, "total_tokens": 1931}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.51, 'loc_y': 0.49, 'size_x': 0.74, 'size_y': 0.99}], 'text': '[A] is there a person behind you, if so follow that human?'}
##################################
{"id": "chatcmpl-88CAz6PA23L30qp7Wat2nvOE2QxAM", "object": "chat.completion", "created": 1696964121, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1875, "completion_tokens": 38, "total_tokens": 1913}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [], 'text': '[A]             consent = input(f">> result: {json.dumps(result)}, executing?")'}
##################################
{"id": "chatcmpl-88CHhoxeMuGlRhYE15jbMB0g5Ku5i", "object": "chat.completion", "created": 1696964537, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "The user's query seems to be a code snippet rather than a valid instruction for the drone. As a drone pilot, I am unable to interpret this instruction. Please provide a valid instruction for the drone."}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1838, "completion_tokens": 41, "total_tokens": 1879}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'tv', 'loc_x': 0.79, 'loc_y': 0.24, 'size_x': 0.23, 'size_y': 0.19}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.47, 'size_x': 0.19, 'size_y': 0.36}, {'name': 'dining table', 'loc_x': 0.56, 'loc_y': 0.69, 'size_x': 0.37, 'size_y': 0.47}], 'text': '[A] is there a person behind you, if so follow that human?'}
##################################
{"id": "chatcmpl-88CHu5okGByLk2NhvjojGjvUNUhj7", "object": "chat.completion", "created": 1696964550, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1961, "completion_tokens": 38, "total_tokens": 1999}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'tv', 'loc_x': 0.79, 'loc_y': 0.24, 'size_x': 0.23, 'size_y': 0.19}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.47, 'size_x': 0.19, 'size_y': 0.36}, {'name': 'dining table', 'loc_x': 0.56, 'loc_y': 0.69, 'size_x': 0.37, 'size_y': 0.47}], 'text': '[A] is there a person behind you, if so follow that human?'}
Response: ['exec#turn_ccw,180', 'if#find,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']

Here is the current environment description:
[{'name': 'chair', 'loc_x': 0.48, 'loc_y': 0.57, 'size_x': 0.34, 'size_y': 0.85}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-88CI1QT4gL9cm9i5O3xZOkAwYK4ow", "object": "chat.completion", "created": 1696964557, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': False, 'feedback': 'The drone did not encounter a person in the environment, so it could not follow the user command to follow a person.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 552, "completion_tokens": 34, "total_tokens": 586}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'chair', 'loc_x': 0.15, 'loc_y': 0.69, 'size_x': 0.3, 'size_y': 0.63}], 'text': '[A] is there a person behind you, if so follow that human?'}
##################################
{"id": "chatcmpl-88CI4s0qZAJigF8L1LgbcZWl8L0nO", "object": "chat.completion", "created": 1696964560, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1875, "completion_tokens": 38, "total_tokens": 1913}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'tv', 'loc_x': 0.73, 'loc_y': 0.18, 'size_x': 0.23, 'size_y': 0.19}, {'name': 'chair', 'loc_x': 0.78, 'loc_y': 0.41, 'size_x': 0.19, 'size_y': 0.38}, {'name': 'chair', 'loc_x': 0.94, 'loc_y': 0.5, 'size_x': 0.12, 'size_y': 0.44}], 'text': '[A] is there a person behind you, if so follow that human?'}
##################################
{"id": "chatcmpl-88CJlJrxKiVLPe6UmQ3AQT927rxK7", "object": "chat.completion", "created": 1696964665, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1959, "completion_tokens": 38, "total_tokens": 1997}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'tv', 'loc_x': 0.73, 'loc_y': 0.18, 'size_x': 0.23, 'size_y': 0.19}, {'name': 'chair', 'loc_x': 0.78, 'loc_y': 0.41, 'size_x': 0.19, 'size_y': 0.38}, {'name': 'chair', 'loc_x': 0.94, 'loc_y': 0.5, 'size_x': 0.12, 'size_y': 0.44}], 'text': '[A] is there a person behind you, if so follow that human?'}
Response: ['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.53, 'loc_y': 0.2, 'size_x': 0.21, 'size_y': 0.4}, {'name': 'laptop', 'loc_x': 0.76, 'loc_y': 0.35, 'size_x': 0.19, 'size_y': 0.13}, {'name': 'chair', 'loc_x': 0.09, 'loc_y': 0.43, 'size_x': 0.18, 'size_y': 0.4}, {'name': 'bottle', 'loc_x': 0.89, 'loc_y': 0.35, 'size_x': 0.06, 'size_y': 0.23}, {'name': 'tv', 'loc_x': 0.09, 'loc_y': 0.17, 'size_x': 0.17, 'size_y': 0.23}, {'name': 'bowl', 'loc_x': 0.51, 'loc_y': 0.79, 'size_x': 0.4, 'size_y': 0.29}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-88CK6Gu0W4bBs8FOZXsqbRVvfXYL0", "object": "chat.completion", "created": 1696964686, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The execution plan is correct. The drone will first turn around to check if there is a person behind it. If a person is detected, the drone will orient itself towards the person and then move forward to follow the person.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 763, "completion_tokens": 55, "total_tokens": 818}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'tv', 'loc_x': 0.62, 'loc_y': 0.38, 'size_x': 0.24, 'size_y': 0.2}, {'name': 'chair', 'loc_x': 0.64, 'loc_y': 0.66, 'size_x': 0.22, 'size_y': 0.4}, {'name': 'cup', 'loc_x': 0.48, 'loc_y': 0.61, 'size_x': 0.06, 'size_y': 0.07}, {'name': 'cup', 'loc_x': 0.48, 'loc_y': 0.64, 'size_x': 0.06, 'size_y': 0.11}, {'name': 'cup', 'loc_x': 0.4, 'loc_y': 0.7, 'size_x': 0.07, 'size_y': 0.09}, {'name': 'keyboard', 'loc_x': 0.52, 'loc_y': 0.7, 'size_x': 0.1, 'size_y': 0.14}], 'text': '[A] is there a person behind you, if so follow that human?'}
##################################
{"id": "chatcmpl-88CLjLhqOLHjL7df4xomXTf9Hk9bS", "object": "chat.completion", "created": 1696964787, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2085, "completion_tokens": 38, "total_tokens": 2123}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'tv', 'loc_x': 0.62, 'loc_y': 0.38, 'size_x': 0.24, 'size_y': 0.2}, {'name': 'chair', 'loc_x': 0.64, 'loc_y': 0.66, 'size_x': 0.22, 'size_y': 0.4}, {'name': 'cup', 'loc_x': 0.48, 'loc_y': 0.61, 'size_x': 0.06, 'size_y': 0.07}, {'name': 'cup', 'loc_x': 0.48, 'loc_y': 0.64, 'size_x': 0.06, 'size_y': 0.11}, {'name': 'cup', 'loc_x': 0.4, 'loc_y': 0.7, 'size_x': 0.07, 'size_y': 0.09}, {'name': 'keyboard', 'loc_x': 0.52, 'loc_y': 0.7, 'size_x': 0.1, 'size_y': 0.14}], 'text': '[A] is there a person behind you, if so follow that human?'}
Response: ['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.46, 'size_x': 0.38, 'size_y': 0.89}, {'name': 'chair', 'loc_x': 0.31, 'loc_y': 0.83, 'size_x': 0.34, 'size_y': 0.34}, {'name': 'tv', 'loc_x': 0.04, 'loc_y': 0.37, 'size_x': 0.08, 'size_y': 0.22}, {'name': 'chair', 'loc_x': 0.06, 'loc_y': 0.68, 'size_x': 0.11, 'size_y': 0.4}, {'name': 'clock', 'loc_x': 0.46, 'loc_y': 0.1, 'size_x': 0.04, 'size_y': 0.09}, {'name': 'chair', 'loc_x': 0.56, 'loc_y': 0.93, 'size_x': 0.21, 'size_y': 0.14}, {'name': 'mouse', 'loc_x': 0.6, 'loc_y': 0.76, 'size_x': 0.05, 'size_y': 0.03}, {'name': 'laptop', 'loc_x': 0.79, 'loc_y': 0.7, 'size_x': 0.23, 'size_y': 0.14}, {'name': 'chair', 'loc_x': 0.55, 'loc_y': 0.81, 'size_x': 0.2, 'size_y': 0.37}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-88CM6jCM8VKFCPiCl56muUmTGPJCw", "object": "chat.completion", "created": 1696964810, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': False, 'feedback': 'The drone has not executed the task yet, so we cannot determine if the user command is satisfied.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1013, "completion_tokens": 30, "total_tokens": 1043}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'tv', 'loc_x': 0.55, 'loc_y': 0.32, 'size_x': 0.21, 'size_y': 0.17}, {'name': 'chair', 'loc_x': 0.76, 'loc_y': 0.78, 'size_x': 0.26, 'size_y': 0.45}, {'name': 'chair', 'loc_x': 0.56, 'loc_y': 0.54, 'size_x': 0.19, 'size_y': 0.31}, {'name': 'chair', 'loc_x': 0.56, 'loc_y': 0.62, 'size_x': 0.2, 'size_y': 0.46}, {'name': 'person', 'loc_x': 0.95, 'loc_y': 0.49, 'size_x': 0.1, 'size_y': 0.58}, {'name': 'chair', 'loc_x': 0.81, 'loc_y': 0.77, 'size_x': 0.37, 'size_y': 0.44}], 'text': '[A] Is there a person behind you? If so, follow that person.'}
##################################
{"id": "chatcmpl-88CPsxoYDXfTTRLncUHPz8A6ajFD6", "object": "chat.completion", "created": 1696965044, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#is_in_sight,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2086, "completion_tokens": 41, "total_tokens": 2127}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.42, 'loc_y': 0.49, 'size_x': 0.85, 'size_y': 0.99}, {'name': 'book', 'loc_x': 0.41, 'loc_y': 0.72, 'size_x': 0.32, 'size_y': 0.19}, {'name': 'book', 'loc_x': 0.43, 'loc_y': 0.86, 'size_x': 0.39, 'size_y': 0.11}], 'text': '[A] Is there a person behind you? If so, follow that person'}
##################################
{"id": "chatcmpl-88CXWCevUU2aOd31TLj7EKrfmsmPX", "object": "chat.completion", "created": 1696965518, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1961, "completion_tokens": 38, "total_tokens": 1999}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.51, 'loc_y': 0.5, 'size_x': 0.99, 'size_y': 1.0}], 'text': '[A] Is there a person behind you? if so, follow that person'}
##################################
{"id": "chatcmpl-88CZNK2mg4TE72PeYnLpTu4T82avW", "object": "chat.completion", "created": 1696965633, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,person,=,True#2', 'exec#orienting,person', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1877, "completion_tokens": 38, "total_tokens": 1915}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.49, 'loc_y': 0.5, 'size_x': 0.99, 'size_y': 1.0}, {'name': 'refrigerator', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.6, 'size_y': 1.0}], 'text': '[A] Is there a chair behind you? If so, follow that chair'}
##################################
{"id": "chatcmpl-88CcMSgjwNFI0CTcJHYDApljmcKAo", "object": "chat.completion", "created": 1696965818, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1921, "completion_tokens": 38, "total_tokens": 1959}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.35, 'loc_y': 0.5, 'size_x': 0.7, 'size_y': 1.0}], 'text': '[A] is there a keyboard behind you? if so follow that keyboard.'}
##################################
{"id": "chatcmpl-88CfkYQBwqKIFPrRdmg8di9ruKUPe", "object": "chat.completion", "created": 1696966028, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,keyboard,=,True#2', 'exec#orienting,keyboard', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1877, "completion_tokens": 38, "total_tokens": 1915}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.85, 'loc_y': 0.49, 'size_x': 0.3, 'size_y': 0.92}], 'text': '[A] is there a keyboard?'}
##################################
{"id": "chatcmpl-88CgHZXfHfsS7i551oPe2Iw9kWths", "object": "chat.completion", "created": 1696966061, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"exec#scan,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1867, "completion_tokens": 7, "total_tokens": 1874}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'chair', 'loc_x': 0.13, 'loc_y': 0.62, 'size_x': 0.26, 'size_y': 0.59}, {'name': 'person', 'loc_x': 0.07, 'loc_y': 0.49, 'size_x': 0.15, 'size_y': 0.82}, {'name': 'bicycle', 'loc_x': 0.61, 'loc_y': 0.5, 'size_x': 0.45, 'size_y': 1.0}], 'text': '[A] is there a keyboard?'}
##################################
{"id": "chatcmpl-88CgzKDyuGRLrxqvYcjCk4MM6CTgn", "object": "chat.completion", "created": 1696966105, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"if#scan,keyboard,=,True#1\", \"str#'Yes, there is a keyboard.'\", \"str#'No, there is no keyboard.'\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1952, "completion_tokens": 35, "total_tokens": 1987}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.42, 'loc_y': 0.47, 'size_x': 0.25, 'size_y': 0.07}, {'name': 'bottle', 'loc_x': 0.07, 'loc_y': 0.39, 'size_x': 0.07, 'size_y': 0.23}, {'name': 'book', 'loc_x': 0.73, 'loc_y': 0.45, 'size_x': 0.18, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-88ChPJ1DUvmE32aTywZbiuL6ey1zo", "object": "chat.completion", "created": 1696966131, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1949, "completion_tokens": 9, "total_tokens": 1958}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.29, 'loc_y': 0.49, 'size_x': 0.58, 'size_y': 0.99}, {'name': 'cake', 'loc_x': 0.12, 'loc_y': 0.44, 'size_x': 0.25, 'size_y': 0.22}], 'text': '[A] is there a keyboard behind you? If so, go to that keyboard'}
##################################
{"id": "chatcmpl-88CiJDskJlhOE4E4daDxZAyBtAdUw", "object": "chat.completion", "created": 1696966187, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#is_in_sight,keyboard,=,True#2', 'exec#orienting,keyboard', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1920, "completion_tokens": 41, "total_tokens": 1961}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.38, 'loc_y': 0.46, 'size_x': 0.24, 'size_y': 0.07}, {'name': 'bottle', 'loc_x': 0.04, 'loc_y': 0.38, 'size_x': 0.07, 'size_y': 0.22}, {'name': 'tv', 'loc_x': 0.4, 'loc_y': 0.18, 'size_x': 0.24, 'size_y': 0.36}, {'name': 'vase', 'loc_x': 0.96, 'loc_y': 0.22, 'size_x': 0.08, 'size_y': 0.44}], 'text': '[A] is there a keyboard insight?'}
##################################
{"id": "chatcmpl-88Cj6PrjpplX8XzWIzwXF17ihSySl", "object": "chat.completion", "created": 1696966236, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#is_in_sight,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1996, "completion_tokens": 10, "total_tokens": 2006}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.39, 'loc_y': 0.47, 'size_x': 0.25, 'size_y': 0.07}, {'name': 'vase', 'loc_x': 0.96, 'loc_y': 0.22, 'size_x': 0.08, 'size_y': 0.44}, {'name': 'book', 'loc_x': 0.69, 'loc_y': 0.44, 'size_x': 0.17, 'size_y': 0.08}, {'name': 'bottle', 'loc_x': 0.04, 'loc_y': 0.4, 'size_x': 0.07, 'size_y': 0.23}], 'text': '[A] is there a keyboard insight?'}
##################################
{"id": "chatcmpl-88CjUfVYCARtCYDIVtUy3j49qOeMt", "object": "chat.completion", "created": 1696966260, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#is_in_sight,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1996, "completion_tokens": 10, "total_tokens": 2006}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.38, 'loc_y': 0.49, 'size_x': 0.23, 'size_y': 0.08}, {'name': 'bottle', 'loc_x': 0.04, 'loc_y': 0.42, 'size_x': 0.06, 'size_y': 0.21}, {'name': 'tv', 'loc_x': 0.39, 'loc_y': 0.27, 'size_x': 0.17, 'size_y': 0.13}], 'text': '[A] is there a keyboard insight?'}
##################################
{"id": "chatcmpl-88Cl1xjmPxic8w3wzThTkUHFE2N08", "object": "chat.completion", "created": 1696966355, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#is_in_sight,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1953, "completion_tokens": 10, "total_tokens": 1963}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.38, 'loc_y': 0.42, 'size_x': 0.23, 'size_y': 0.07}, {'name': 'bottle', 'loc_x': 0.04, 'loc_y': 0.33, 'size_x': 0.07, 'size_y': 0.22}, {'name': 'bottle', 'loc_x': 0.04, 'loc_y': 0.2, 'size_x': 0.07, 'size_y': 0.29}, {'name': 'tv', 'loc_x': 0.39, 'loc_y': 0.21, 'size_x': 0.16, 'size_y': 0.14}], 'text': '[A] is there a keyboard insight?'}
##################################
{"id": "chatcmpl-88Cn7zSmjlSXDSIt4dDcJeQ6SecFN", "object": "chat.completion", "created": 1696966485, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#is_in_sight,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1996, "completion_tokens": 10, "total_tokens": 2006}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.36, 'loc_y': 0.51, 'size_x': 0.27, 'size_y': 0.09}, {'name': 'book', 'loc_x': 0.69, 'loc_y': 0.48, 'size_x': 0.18, 'size_y': 0.12}, {'name': 'vase', 'loc_x': 0.97, 'loc_y': 0.23, 'size_x': 0.06, 'size_y': 0.46}], 'text': '[A] is there a keyboard in sight?'}
##################################
{"id": "chatcmpl-88CprjJPyRwfPgxn01v2fUlofFiTO", "object": "chat.completion", "created": 1696966655, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#is_in_sight,keyboard\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1954, "completion_tokens": 10, "total_tokens": 1964}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.36, 'loc_y': 0.51, 'size_x': 0.27, 'size_y': 0.09}, {'name': 'book', 'loc_x': 0.69, 'loc_y': 0.48, 'size_x': 0.18, 'size_y': 0.12}, {'name': 'vase', 'loc_x': 0.97, 'loc_y': 0.23, 'size_x': 0.06, 'size_y': 0.46}], 'text': '[A] can you see anything drinkable?'}
##################################
{"id": "chatcmpl-88Cq55QZHxYDY6GdnAhsKc5Enczwn", "object": "chat.completion", "created": 1696966669, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#query,'is there anything drinkable?'\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1954, "completion_tokens": 12, "total_tokens": 1966}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'keyboard', 'loc_x': 0.36, 'loc_y': 0.51, 'size_x': 0.27, 'size_y': 0.09}, {'name': 'book', 'loc_x': 0.69, 'loc_y': 0.48, 'size_x': 0.18, 'size_y': 0.12}, {'name': 'vase', 'loc_x': 0.97, 'loc_y': 0.23, 'size_x': 0.06, 'size_y': 0.46}]
Question: 'is there anything drinkable?'
##################################
{"id": "chatcmpl-88Cq8Z9R9vxWdIvOPsD7RBGskV4gD", "object": "chat.completion", "created": 1696966672, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 184, "completion_tokens": 1, "total_tokens": 185}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.42, 'loc_y': 0.5, 'size_x': 0.83, 'size_y': 1.0}], 'text': '[A] Is there a book behind you? If so, go to that book'}
##################################
{"id": "chatcmpl-88CrYCqP6Jg9GA0XAOmlzxU8asOYO", "object": "chat.completion", "created": 1696966760, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#find,book,=,True#2', 'exec#orienting,book', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1878, "completion_tokens": 38, "total_tokens": 1916}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'refrigerator', 'loc_x': 0.5, 'loc_y': 0.5, 'size_x': 0.98, 'size_y': 1.0}], 'text': '[A] Is there a book behind you? If so, go to that book'}
##################################
{"id": "chatcmpl-88CtF9lkzcmazhDnXv7LYmWDsPAAD", "object": "chat.completion", "created": 1696966865, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,book,=,True#2', 'exec#orienting,book', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1878, "completion_tokens": 38, "total_tokens": 1916}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.17, 'loc_y': 0.51, 'size_x': 0.3, 'size_y': 0.1}, {'name': 'microwave', 'loc_x': 0.28, 'loc_y': 0.92, 'size_x': 0.48, 'size_y': 0.16}, {'name': 'book', 'loc_x': 0.63, 'loc_y': 0.46, 'size_x': 0.22, 'size_y': 0.11}], 'text': '[A] If there is a book insight, go to it'}
##################################
{"id": "chatcmpl-88CuGeWHL2JpeQFYFyh5EQSaNk2fO", "object": "chat.completion", "created": 1696966928, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['if#scan,book,=,True#3', 'exec#orienting,book', 'exec#centering_y,book', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1957, "completion_tokens": 38, "total_tokens": 1995}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'chair', 'loc_x': 0.9, 'loc_y': 0.67, 'size_x': 0.2, 'size_y': 0.64}, {'name': 'tv', 'loc_x': 0.4, 'loc_y': 0.21, 'size_x': 0.3, 'size_y': 0.31}, {'name': 'chair', 'loc_x': 0.45, 'loc_y': 0.47, 'size_x': 0.24, 'size_y': 0.45}, {'name': 'keyboard', 'loc_x': 0.3, 'loc_y': 0.52, 'size_x': 0.13, 'size_y': 0.11}, {'name': 'dining table', 'loc_x': 0.21, 'loc_y': 0.71, 'size_x': 0.42, 'size_y': 0.58}], 'text': '[A] find a book'}
##################################
{"id": "chatcmpl-88CvkgOm6YKkwmaE3UylW5IBbWzW9", "object": "chat.completion", "created": 1696967020, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['if#scan,book,=,True#2', 'exec#orienting,book', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2035, "completion_tokens": 29, "total_tokens": 2064}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'chair', 'loc_x': 0.87, 'loc_y': 0.8, 'size_x': 0.26, 'size_y': 0.36}, {'name': 'tv', 'loc_x': 0.13, 'loc_y': 0.21, 'size_x': 0.26, 'size_y': 0.33}, {'name': 'chair', 'loc_x': 0.14, 'loc_y': 0.41, 'size_x': 0.29, 'size_y': 0.35}, {'name': 'dining table', 'loc_x': 0.92, 'loc_y': 0.55, 'size_x': 0.16, 'size_y': 0.15}, {'name': 'chair', 'loc_x': 0.27, 'loc_y': 0.62, 'size_x': 0.53, 'size_y': 0.73}, {'name': 'chair', 'loc_x': 0.63, 'loc_y': 0.67, 'size_x': 0.26, 'size_y': 0.65}], 'text': '[A] find a keyboard'}
##################################
{"id": "chatcmpl-88Cw4qJb8OZ4CexXpauO2Dj9Ue8p4", "object": "chat.completion", "created": 1696967040, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['if#scan,keyboard,=,True#2', 'exec#orienting,keyboard', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2077, "completion_tokens": 29, "total_tokens": 2106}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [], 'text': '[A] Is there a keyboard behind you? If so, go to that keyboard'}
##################################
{"id": "chatcmpl-88CxpTwuZKJAQpFZzjXDhX2ozwqyt", "object": "chat.completion", "created": 1696967149, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180', 'if#scan,keyboard,=,True#2', 'exec#orienting,keyboard', 'exec#move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1835, "completion_tokens": 38, "total_tokens": 1873}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'keyboard', 'loc_x': 0.06, 'loc_y': 0.55, 'size_x': 0.12, 'size_y': 0.09}, {'name': 'book', 'loc_x': 0.46, 'loc_y': 0.56, 'size_x': 0.27, 'size_y': 0.18}], 'text': '[A] Find something drinkable, if nothing can be found, then find books for me'}
##################################
{"id": "chatcmpl-88D3kRCwJffxPZLfMa8ryzigHY2vb", "object": "chat.completion", "created": 1696967516, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"if#find_edible_obj,=,True#2\", \"str#'Found something drinkable.'\", \"exec#orienting,book\", \"exec#move_forward,50\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1920, "completion_tokens": 39, "total_tokens": 1959}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'keyboard', 'loc_x': 0.73, 'loc_y': 0.52, 'size_x': 0.27, 'size_y': 0.1}, {'name': 'chair', 'loc_x': 0.21, 'loc_y': 0.67, 'size_x': 0.42, 'size_y': 0.66}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D3r6gjsFWQOWiCEvIwEPeh4oQsf", "object": "chat.completion", "created": 1696967523, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 140, "completion_tokens": 1, "total_tokens": 141}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'tv', 'loc_x': 0.64, 'loc_y': 0.2, 'size_x': 0.21, 'size_y': 0.17}, {'name': 'bottle', 'loc_x': 0.28, 'loc_y': 0.55, 'size_x': 0.07, 'size_y': 0.25}, {'name': 'dining table', 'loc_x': 0.33, 'loc_y': 0.65, 'size_x': 0.66, 'size_y': 0.34}, {'name': 'chair', 'loc_x': 0.84, 'loc_y': 0.66, 'size_x': 0.31, 'size_y': 0.69}, {'name': 'chair', 'loc_x': 0.68, 'loc_y': 0.4, 'size_x': 0.22, 'size_y': 0.33}, {'name': 'chair', 'loc_x': 0.66, 'loc_y': 0.34, 'size_x': 0.17, 'size_y': 0.21}, {'name': 'dining table', 'loc_x': 0.34, 'loc_y': 0.74, 'size_x': 0.68, 'size_y': 0.51}, {'name': 'chair', 'loc_x': 0.94, 'loc_y': 0.49, 'size_x': 0.12, 'size_y': 0.29}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D3wXwyH03AcLGijrWVyGyhwb9RP", "object": "chat.completion", "created": 1696967528, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 397, "completion_tokens": 1, "total_tokens": 398}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'refrigerator', 'loc_x': 0.5, 'loc_y': 0.5, 'size_x': 1.0, 'size_y': 1.0}, {'name': 'dining table', 'loc_x': 0.81, 'loc_y': 0.76, 'size_x': 0.38, 'size_y': 0.48}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D40dkcpvNA45W8DUspoHKctmhwc", "object": "chat.completion", "created": 1696967532, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 144, "completion_tokens": 1, "total_tokens": 145}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'refrigerator', 'loc_x': 0.51, 'loc_y': 0.5, 'size_x': 0.99, 'size_y': 1.0}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D45JgwrMLhCZH8JltV8D3iY5URh", "object": "chat.completion", "created": 1696967537, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 100, "completion_tokens": 1, "total_tokens": 101}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: []
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D4AEhNNlzXpBDWKdYFiOjwgIbj8", "object": "chat.completion", "created": 1696967542, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 57, "completion_tokens": 1, "total_tokens": 58}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'chair', 'loc_x': 0.13, 'loc_y': 0.69, 'size_x': 0.24, 'size_y': 0.6}, {'name': 'person', 'loc_x': 0.07, 'loc_y': 0.57, 'size_x': 0.15, 'size_y': 0.86}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D4GSw6TqaPvOjijIw8ATR0t5yVL", "object": "chat.completion", "created": 1696967548, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 140, "completion_tokens": 1, "total_tokens": 141}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.78, 'loc_y': 0.53, 'size_x': 0.31, 'size_y': 0.93}, {'name': 'cup', 'loc_x': 0.62, 'loc_y': 0.29, 'size_x': 0.06, 'size_y': 0.11}, {'name': 'hot dog', 'loc_x': 0.7, 'loc_y': 0.7, 'size_x': 0.13, 'size_y': 0.06}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-88D4Lqc6Gt600OQIQ3HJhfUOqwOCQ", "object": "chat.completion", "created": 1696967553, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "True"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 183, "completion_tokens": 1, "total_tokens": 184}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'person', 'loc_x': 0.67, 'loc_y': 0.49, 'size_x': 0.37, 'size_y': 0.95}, {'name': 'hot dog', 'loc_x': 0.6, 'loc_y': 0.68, 'size_x': 0.13, 'size_y': 0.06}, {'name': 'laptop', 'loc_x': 0.5, 'loc_y': 0.4, 'size_x': 0.22, 'size_y': 0.15}, {'name': 'chair', 'loc_x': 0.83, 'loc_y': 0.63, 'size_x': 0.25, 'size_y': 0.58}, {'name': 'person', 'loc_x': 0.67, 'loc_y': 0.35, 'size_x': 0.37, 'size_y': 0.67}, {'name': 'chair', 'loc_x': 0.63, 'loc_y': 0.82, 'size_x': 0.24, 'size_y': 0.36}], 'text': '[A] Can you find something for drink'}
##################################
{"id": "chatcmpl-88D5JRAcxt70AER8neblskhz0Cm7z", "object": "chat.completion", "created": 1696967613, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"loop#8#3\", \"if#query,'is there anything for drink?',=,True#1\", \"return#true\", \"exec#turn_ccw,45\", \"return#false\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 2080, "completion_tokens": 43, "total_tokens": 2123}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.7, 'loc_y': 0.32, 'size_x': 0.27, 'size_y': 0.58}, {'name': 'chair', 'loc_x': 0.73, 'loc_y': 0.67, 'size_x': 0.45, 'size_y': 0.66}, {'name': 'chair', 'loc_x': 0.69, 'loc_y': 0.78, 'size_x': 0.38, 'size_y': 0.45}, {'name': 'hot dog', 'loc_x': 0.6, 'loc_y': 0.68, 'size_x': 0.14, 'size_y': 0.07}, {'name': 'chair', 'loc_x': 0.89, 'loc_y': 0.52, 'size_x': 0.13, 'size_y': 0.36}]
Question: 'is there anything for drink?'
##################################
{"id": "chatcmpl-88D5Npm0ogLPUzijHc60BDftQYvxb", "object": "chat.completion", "created": 1696967617, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 268, "completion_tokens": 1, "total_tokens": 269}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'book', 'loc_x': 0.23, 'loc_y': 0.51, 'size_x': 0.28, 'size_y': 0.17}, {'name': 'cup', 'loc_x': 0.84, 'loc_y': 0.33, 'size_x': 0.32, 'size_y': 0.66}]
Question: 'is there anything for drink?'
##################################
{"id": "chatcmpl-88D5SQTZuaGn6BjclKeboZFQp6E4o", "object": "chat.completion", "created": 1696967622, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "True"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 141, "completion_tokens": 1, "total_tokens": 142}}
##################################
You are a drone pilot and you should follow the user's instruction to generate a task plan for the drone. You response should consider the description of the drone's skills, the environment description and the user's instruction.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities. The control block design is High-level skill design:
"exec#skill_name,kwargs": Execute the skill specified by `skill_name` with the given `kwargs`.
"if#skill_name,kwargs,cmp,val#nbr": Execute the skill specified by `skill_name` with the given `kwargs`. Then compare the return value with `val` using `cmp`. If the result is true, then execute the next `nbr` commands. Otherwise, skip the next `nbr` commands.
"loop#count#nbr": Loop the next `nbr` commands for `count` times. If `count` is -1, then loop forever.
"skip#nbr": Skip the next `nbr` commands.
"delay#time": Delay the next command for `time` microseconds.
"break": Break the current `loop` execution.
"str#text": Print the `text` to the console.
"str#skill_name,kwargs": Print the return value of the skill specified by `skill_name` with the given `kwargs` to the console..

Description of the two skill sets:
- High-level tools: Skill(name: scan, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#1", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and the text instruction. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text instruction is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer at the end of the plan execution. The user's instruction is the goal of the task, you should interpret it and generate a multi-step plan to achieve it. 

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#scan,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ["str#'Yes, there is an apple and a lemon in sight.'"], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['laptop', 'lemon'], 'text': '[Q] is there anything edible behind you?'}, 'response': ['exec#turn_ccw,180', "str#query,'is there anything edible?'"], 'explanation': 'This is a query problem but requires the drone to turn around first. So the planner will first turn around and then print the query result.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] Turn around until you can see some animal.'}, 'response': ['loop#8#3', "if#query,'is there any animal?',=,True#1", 'return#true', 'exec#turn_ccw,45', 'return#false'], 'explanation': 'Loop 8 times, if the answer to the question is true, return true. Otherwise, turn 45 degrees counter-clockwise. If the loop is finished, return false.'}]

Given the following user's query, please generate the response string only. The response should be in the format of "[skill_calls]"
Query: {'objects': [{'name': 'oven', 'loc_x': 0.28, 'loc_y': 0.7, 'size_x': 0.56, 'size_y': 0.61}, {'name': 'bottle', 'loc_x': 0.46, 'loc_y': 0.16, 'size_x': 0.03, 'size_y': 0.12}, {'name': 'microwave', 'loc_x': 0.28, 'loc_y': 0.7, 'size_x': 0.56, 'size_y': 0.6}], 'text': "[A] Can you find something for me to drink? If you can't, then find something for eat."}
##################################
{"id": "chatcmpl-88D7xUpgWkqCCRdFafNn3sflLFVTl", "object": "chat.completion", "created": 1696967777, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"if#scan,bottle,=,True#2\", \"exec#orienting,bottle\", \"exec#move_forward,50\", \"if#scan,oven,=,True#2\", \"exec#orienting,oven\", \"exec#move_forward,50\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1968, "completion_tokens": 58, "total_tokens": 2026}}
##################################
