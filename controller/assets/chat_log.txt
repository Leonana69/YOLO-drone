You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'toilet'], 'command': 'find a keyboard'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833ab6misSVPiw3Duigqb9LAdCtO8", "object": "chat.completion", "created": 1695739473, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,keyboard', 'exec#high,align,keyboard']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1323, "completion_tokens": 18, "total_tokens": 1341}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'bottle'], 'command': 'find chair'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833bTjMuxNy9BAp0SNVQ3z2kYNiSO", "object": "chat.completion", "created": 1695739527, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,chair', 'exec#high,align,chair']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 18, "total_tokens": 1340}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'bottle'], 'command': 'find chair'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833dq90DmmTMWf5uk6jiMbdLGM5fL", "object": "chat.completion", "created": 1695739674, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,chair', 'exec#high,align,chair']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 18, "total_tokens": 1340}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'bottle'], 'command': 'find chair'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833f3etfV6MsjzU4rqhUsV87X85et", "object": "chat.completion", "created": 1695739749, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,chair', 'exec#high,align,chair']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 18, "total_tokens": 1340}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'bottle'], 'command': 'find chair'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833fWalPlz5nQGnfsmDdZSROBnRaE", "object": "chat.completion", "created": 1695739778, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,chair', 'exec#high,align,chair']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 18, "total_tokens": 1340}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'bottle'], 'command': 'find chair'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833foZMS6EYbSznTiGE1vDPrrCHv1", "object": "chat.completion", "created": 1695739796, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,chair', 'exec#high,align,chair']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 18, "total_tokens": 1340}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['cup', 'tv', 'potted_plant', 'backpack'], 'command': 'please find a keyboard'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833tTVzfsw4H8SL1pnGSymMUsu7Qu", "object": "chat.completion", "created": 1695740643, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,keyboard', 'exec#high,align,keyboard']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1330, "completion_tokens": 18, "total_tokens": 1348}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['keyboard', 'chair', 'tv', 'person', 'mouse', 'laptop', 'chair', 'banana', 'clock'], 'command': 'turn around'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833tq5hleXdFdVRy51M7cqwfINKGr", "object": "chat.completion", "created": 1695740666, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1340, "completion_tokens": 11, "total_tokens": 1351}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': [], 'command': 'find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-833u1OiDihJsjvnV2Jnaie6kvkN1F", "object": "chat.completion", "created": 1695740677, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,person', 'exec#high,align,person']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1314, "completion_tokens": 18, "total_tokens": 1332}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'bottle'], 'command': 'is there anything I can drink?'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8344XWPpHHd3s28pjYhJcbd0LMapy", "object": "chat.completion", "created": 1695741329, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#Yes, there is a bottle in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1324, "completion_tokens": 12, "total_tokens": 1336}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'bottle'], 'command': 'is there anything I can drink?'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8344kpJvEMls4NRutOIq6qiwFNvjX", "object": "chat.completion", "created": 1695741342, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#Yes, there is a bottle in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1324, "completion_tokens": 12, "total_tokens": 1336}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'bottle'], 'command': '[Q] is there anything I can eat?'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8345cROlKi9JtWB4uy9XKSERGpQIc", "object": "chat.completion", "created": 1695741396, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#No, there is nothing edible in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1326, "completion_tokens": 12, "total_tokens": 1338}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'bottle'], 'command': '[A] Find something I can eat.'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8345wPunkSJ5ToMLmPljLTob6CBZ3", "object": "chat.completion", "created": 1695741416, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1325, "completion_tokens": 14, "total_tokens": 1339}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'bottle', 'apple'], 'command': '[A] Find something I can eat.'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8346EhwUJHpfuhEhZRhx7AqUlH6Le", "object": "chat.completion", "created": 1695741434, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,apple', 'exec#high,align,apple']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1328, "completion_tokens": 18, "total_tokens": 1346}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['cup'], 'command': 'find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-835sPElvu1pKDQUrx4AdNLfY2q9Rd", "object": "chat.completion", "created": 1695748265, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,cup', 'exec#high,align,cup']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1317, "completion_tokens": 18, "total_tokens": 1335}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no edible object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['chair', 'person', 'tv', 'chair', 'laptop'], 'command': 'find something that I can drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-835vq5Kpy00f2nd3zohKklrlWb7IT", "object": "chat.completion", "created": 1695748478, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,water', 'exec#high,scan,juice', 'exec#high,scan,soda']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1332, "completion_tokens": 28, "total_tokens": 1360}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no drinkable object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['chair', 'person', 'cup'], 'command': '[A] find something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-835z0VOJiJnSWg274Agiovzb8RMW8", "object": "chat.completion", "created": 1695748674, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,cup', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1327, "completion_tokens": 19, "total_tokens": 1346}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no drinkable object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['person', 'chair', 'tv'], 'command': '[A] find something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-835zS0Fcy6mdszzHZNPd8O1a4E6d6", "object": "chat.completion", "created": 1695748702, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,water', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1327, "completion_tokens": 12, "total_tokens": 1339}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'Since the apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no drinkable object in the list, the planner will turn around and redo this query.'}].
Then this is the user input: {'objects': ['toilet'], 'command': '[A] find something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8360sxPsOXrXDHsUTGqD0xPkAsKmt", "object": "chat.completion", "created": 1695748790, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,water', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1322, "completion_tokens": 12, "total_tokens": 1334}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'exec#high,align,chair'], 'explanation': 'Since there is no object in the list, the planner will scan the environment to find the object.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8362ldZAVVVR4tn9DFDdfr6C8WfhQ", "object": "chat.completion", "created": 1695748907, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,drink', 'exec#high,align,drink']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1325, "completion_tokens": 18, "total_tokens": 1343}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8365nhWMatyRe7qFSq7UXRkj7WlsD", "object": "chat.completion", "created": 1695749095, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,something to drink', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1321, "completion_tokens": 14, "total_tokens": 1335}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user. In most case, the user's command is related to the object list.
Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something edible'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8366Awcrb0htQYBo5EChIh21TpgIF", "object": "chat.completion", "created": 1695749118, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,edible', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1320, "completion_tokens": 13, "total_tokens": 1333}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8367ehcdbV8KhzI0I2fnwxAD30fLe", "object": "chat.completion", "created": 1695749210, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1342, "completion_tokens": 14, "total_tokens": 1356}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': ['bed'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8367jzdQOjbCBvs4PU920Qc8tEdYy", "object": "chat.completion", "created": 1695749215, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1344, "completion_tokens": 14, "total_tokens": 1358}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8367v57duG0zei0Vd4cLWI87DJN9B", "object": "chat.completion", "created": 1695749227, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1342, "completion_tokens": 14, "total_tokens": 1356}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-8367zeqOHQvgowLwecX0zVBH567mW", "object": "chat.completion", "created": 1695749231, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1342, "completion_tokens": 14, "total_tokens": 1356}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': [], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836851MFtlAUxew7dJNYrk5VWQwzm", "object": "chat.completion", "created": 1695749237, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1342, "completion_tokens": 14, "total_tokens": 1356}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['loop#5', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Since there is no object in the list, the planner will scan the environment and repeat the query.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something drinkable'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': "There is no drinkable object in the list, the planner should turn around and redo this query and shouldn't direct scan for some object."}].
Then this is the user input: {'objects': ['chair', 'bottle', 'chair', 'dining_table', 'microwave', 'tv'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-83689aZzTSiQd8rCu8zWAKoumejl4", "object": "chat.completion", "created": 1695749241, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'exec#high,align,bottle', 'exec#high,centering,bottle']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1363, "completion_tokens": 28, "total_tokens": 1391}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,60', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair', 'bowl', 'bed'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836KTpqdTvYwuIrOA0ZryuQ1FdCCX", "object": "chat.completion", "created": 1695750005, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,60', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1416, "completion_tokens": 14, "total_tokens": 1430}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,60', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836KZcjg8QUWZhsKBFpbXgvuCZyX8", "object": "chat.completion", "created": 1695750011, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,60', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1409, "completion_tokens": 14, "total_tokens": 1423}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,60', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['tv', 'laptop', 'chair', 'bottle', 'chair', 'person', 'dining_table'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836KfaFeSqW6VTYV6GBbPIYafsbkF", "object": "chat.completion", "created": 1695750017, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1431, "completion_tokens": 12, "total_tokens": 1443}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair', 'chair', 'bottle', 'tv', 'person', 'laptop', 'dining_table', 'cup', 'laptop', 'cup', 'carrot', 'dining_table'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836N9WlTcOB0AqZgU6tlLy19avpWw", "object": "chat.completion", "created": 1695750171, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1450, "completion_tokens": 12, "total_tokens": 1462}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair', 'chair', 'bottle', 'tv', 'person', 'laptop', 'dining_table'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836NDzaUlszoAFdRYno3Io7fWjIIa", "object": "chat.completion", "created": 1695750175, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1431, "completion_tokens": 12, "total_tokens": 1443}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair', 'chair', 'tv', 'bottle', 'laptop', 'person', 'dining_table', 'cup'], 'command': '[A] find something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836NMY28OZT4yFpVEHzxrVl8MWhsC", "object": "chat.completion", "created": 1695750184, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'exec#high,scan,cup', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1434, "completion_tokens": 21, "total_tokens": 1455}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['chair', 'chair', 'tv', 'laptop', 'bottle', 'dining_table', 'person', 'cup', 'dining_table'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836OX7B7dqztAxXEjEUqzbeHhlzsf", "object": "chat.completion", "created": 1695750257, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'exec#high,align,bottle', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1441, "completion_tokens": 28, "total_tokens": 1469}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['bottle', 'chair', 'chair', 'dining_table'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836OumpC3Dkx2mNLxd2knR4ZMfVHk", "object": "chat.completion", "created": 1695750280, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,person', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1420, "completion_tokens": 12, "total_tokens": 1432}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['tv', 'mouse', 'person', 'laptop', 'chair', 'dining_table'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836P3Y7xDrCBf3r5nwrFLo6K4dSUy", "object": "chat.completion", "created": 1695750289, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,person', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1426, "completion_tokens": 19, "total_tokens": 1445}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['tv', 'chair', 'laptop', 'person', 'keyboard', 'mouse', 'tv'], 'command': '[A] turn around'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836PJ5uoYvHktVrnV3p7MlVp5Csz6", "object": "chat.completion", "created": 1695750305, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1426, "completion_tokens": 11, "total_tokens": 1437}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': [], 'command': '[A] turn left a little bit'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836PcrgLmTjDwSIOKWWK5NVLGDD35", "object": "chat.completion", "created": 1695750324, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,15']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1408, "completion_tokens": 11, "total_tokens": 1419}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': [], 'command': '[Q] is there a chair?'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836PqFtfku3WqCtWnwITJ2rAq4i8B", "object": "chat.completion", "created": 1695750338, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#No, there is no chair in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1408, "completion_tokens": 12, "total_tokens": 1420}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': [], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836Q6o35PBIykjqWfiLOIU33FkWQd", "object": "chat.completion", "created": 1695750354, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,person', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1406, "completion_tokens": 12, "total_tokens": 1418}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'cup'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836QC8k3BlqHwMMtPZJb1OKz0LsQY", "object": "chat.completion", "created": 1695750360, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,person', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1411, "completion_tokens": 19, "total_tokens": 1430}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['cup', 'person', 'laptop', 'keyboard', 'mouse'], 'command': '[A] is there a laptop'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836QPPC72BPwCldGuIGPUKgrEEBzz", "object": "chat.completion", "created": 1695750373, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,laptop', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1422, "completion_tokens": 19, "total_tokens": 1441}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'laptop', 'cup', 'mouse', 'chair'], 'command': '[Q] is there a laptop?'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836Qd4VnkBfc3LwK9Od5gLvgOytm9", "object": "chat.completion", "created": 1695750387, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#Yes, there is a laptop in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1423, "completion_tokens": 12, "total_tokens": 1435}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['refrigerator'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836s7oPPfYzqvMBI2aHBHJxc4hTOW", "object": "chat.completion", "created": 1695752091, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,refrigerator', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1413, "completion_tokens": 14, "total_tokens": 1427}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['tv'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836uThKBBmTwoZroqfQb3AF6Sgf6S", "object": "chat.completion", "created": 1695752237, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1411, "completion_tokens": 14, "total_tokens": 1425}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'tv', 'chair'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836uWEMW7JOhNg9XG5oZ0SEu4FKuN", "object": "chat.completion", "created": 1695752240, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1417, "completion_tokens": 14, "total_tokens": 1431}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'tv', 'keyboard', 'bottle', 'mouse'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836uagPQc7vRoHie5xpPNXIXMxCf4", "object": "chat.completion", "created": 1695752244, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,bottle', 'exec#high,align,bottle', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1424, "completion_tokens": 28, "total_tokens": 1452}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['bottle', 'dining_table'], 'command': '[A] turn around'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836v1xR09YacENbwzwgBJy3EomGSa", "object": "chat.completion", "created": 1695752271, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1413, "completion_tokens": 11, "total_tokens": 1424}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['refrigerator'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836vBrzRXL8YhfOowrq3f8PzAwY03", "object": "chat.completion", "created": 1695752281, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,person', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1410, "completion_tokens": 12, "total_tokens": 1422}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'chair', 'mouse', 'tv', 'laptop', 'keyboard', 'laptop', 'chair'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836vQ9l9vSs3kENqQwmh0S4CU0ZVP", "object": "chat.completion", "created": 1695752296, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,person', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1431, "completion_tokens": 19, "total_tokens": 1450}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'bicycle'], 'command': '[A] eixt'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836vaedpycMkbec5bC5fUBRrwNBBW", "object": "chat.completion", "created": 1695752306, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,move_backward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1412, "completion_tokens": 10, "total_tokens": 1422}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'mouse', 'chair', 'laptop', 'laptop', 'tv', 'chair'], 'command': '[A] eitexit'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-836vie7BdRxATVOxp67SFUPM4pDpt", "object": "chat.completion", "created": 1695752314, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,eitexit', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1428, "completion_tokens": 13, "total_tokens": 1441}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'person', 'person'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837erPFCayw0jrD5CYzfaGAJaZoAE", "object": "chat.completion", "created": 1695755113, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1417, "completion_tokens": 14, "total_tokens": 1431}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'person', 'person', 'baseball_bat'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837eu556goLzB0BXIjvuubFqNzMW1", "object": "chat.completion", "created": 1695755116, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1423, "completion_tokens": 14, "total_tokens": 1437}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'chair', 'laptop', 'backpack', 'tv', 'cup', 'person', 'keyboard', 'mouse', 'keyboard'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837exNwwZgtpGl25xWIY0SYHe23P8", "object": "chat.completion", "created": 1695755119, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,cup', 'exec#high,align,cup', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1440, "completion_tokens": 28, "total_tokens": 1468}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'tv', 'laptop', 'chair', 'dining_table'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837fPKRgCu9EdKJXxZ7RRf72SZvAc", "object": "chat.completion", "created": 1695755147, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1426, "completion_tokens": 14, "total_tokens": 1440}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['tv', 'book'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837fSBSmY4VfHgyOZsKYlRBpSPO1m", "object": "chat.completion", "created": 1695755150, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,45', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1414, "completion_tokens": 14, "total_tokens": 1428}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['cake', 'refrigerator'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837fUPfBIFWbd5jl379sIxYo9piZo", "object": "chat.completion", "created": 1695755152, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,refrigerator', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1416, "completion_tokens": 14, "total_tokens": 1430}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'person', 'person'], 'command': '[A] find and get something to drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837foYVlcRD2cA5gvuzNwJkqL09pa", "object": "chat.completion", "created": 1695755172, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,drink', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1417, "completion_tokens": 12, "total_tokens": 1429}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['cup', 'laptop', 'chair', 'tv', 'backpack', 'keyboard'], 'command': '[A] find and get something for drink'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837gfbelwVp28Oh3XaUvbT9VVft9e", "object": "chat.completion", "created": 1695755225, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,cup', 'exec#high,align,cup', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1428, "completion_tokens": 28, "total_tokens": 1456}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['laptop', 'cup', 'chair', 'keyboard'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837gxgYL9dCwpYK6OgsRphyNxATTr", "object": "chat.completion", "created": 1695755243, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,person', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1418, "completion_tokens": 12, "total_tokens": 1430}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'chair', 'laptop', 'tv', 'mouse', 'keyboard', 'dining_table'], 'command': '[A] find a person'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837hAnMSQNhwQiIy6aRKLPshztuSI", "object": "chat.completion", "created": 1695755256, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,align,person', 'exec#low,move_forward,50']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1429, "completion_tokens": 19, "total_tokens": 1448}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: ToolSet(
  level: high,
  tools: [ToolItem(name: scan, tool_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), ToolItem(name: align, tool_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), ToolItem(name: centering, tool_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: ToolSet(
  level: low,
  tools: [ToolItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), ToolItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), ToolItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), ToolItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), ToolItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), ToolItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), ToolItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), ToolItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), ToolItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), ToolItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), ToolItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), ToolItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['laptop', 'tv', 'person', 'keyboard', 'tie'], 'command': '[A] turn around'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-837hMuJzcVeZ3Z5Xhwc05y4z6XtRn", "object": "chat.completion", "created": 1695755268, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#low,turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1420, "completion_tokens": 11, "total_tokens": 1431}}
##################################
You are a drone pilot. You are provided with two tool sets, a low-level tool set and a high-level tool set, which allow you to control the drone. Low-level tool set can not be modified, high-level tools are built with low-level tools and some logic blocks. Low-level tools are more flexible but require more effort to use, while high-level tools are more convenient but less flexible. Please use the high-level tools to control the drone directly as many as possible, or you can create a new high-level tool with low level tools.
Here are the definitions of the two tool sets: high-level tools: SkillSet(
  level: high,
  skills: [SkillItem(name: scan, skill_str_list: ['repeat#5,12', 'if#low,is_not_in_sight,$1#3', 'exec#low,turn_ccw,30', 'delay#300', 'skip#1', 'break'], args: [object_name: str], comment: scan the environment to find the object), SkillItem(name: align, skill_str_list: ['loop#7', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,turn_cw,15', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,turn_ccw,15', 'if#low,check_location_x,$1,<,0.6#2', 'if#low,check_location_x,$1,>,0.4#1', 'break'], args: [object_name: str], comment: align the object to the center of the frame by rotating the drone), SkillItem(name: centering, skill_str_list: ['loop#13', 'if#low,check_location_x,$1,>,0.6#1', 'exec#low,move_right,20', 'if#low,check_location_x,$1,<,0.4#1', 'exec#low,move_left,20', 'if#low,check_location_y,$1,<,0.4#2', 'exec#low,move_up,20', 'if#low,check_location_y,$1,>,0.6#2', 'exec#low,move_down,20', 'if#low,check_location_x,$1,<,0.6#4', 'if#low,check_location_x,$1,>,0.4#3', 'if#low,check_location_y,$1,>,0.4#2', 'if#low,check_location_y,$1,<,0.6#1', 'break'], args: [object_name: str], comment: center the object in the frame by moving the drone)],
), low-level tools: SkillSet(
  level: low,
  skills: [SkillItem(name: move_forward, args: [distance: int], comment: Move drone forward by a distance), SkillItem(name: move_backward, args: [distance: int], comment: Move drone backward by a distance), SkillItem(name: move_left, args: [distance: int], comment: Move drone left by a distance), SkillItem(name: move_right, args: [distance: int], comment: Move drone right by a distance), SkillItem(name: move_up, args: [distance: int], comment: Move drone up by a distance), SkillItem(name: move_down, args: [distance: int], comment: Move drone down by a distance), SkillItem(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree), SkillItem(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree), SkillItem(name: is_in_sight, args: [object_name: str], comment: Check if an object is in sight), SkillItem(name: is_not_in_sight, args: [object_name: str], comment: Check if an object is not in sight), SkillItem(name: check_location_x, args: [object_name: str, compare: str, val: float], comment: Check if x location of an object meets the comparison criterion with the value), SkillItem(name: check_location_y, args: [object_name: str, compare: str, val: float], comment: Check if y location of an object meets the comparison criterion with the value)],
).
The input consists of an object list and user's command. User's command may start with "[A]" or "[Q]", they means action and query respectively. Action means you need to generate a command to control the drone, query means you need to generate a response to the user.
High priority rules:
1. The user's command is highly related to the object list, if some object is not in the list, you should not call tools with this object unless the object name is specified by the user.

Here are some examples of input and output: [{'input': {'objects': [], 'command': '[A] find a chair'}, 'output': ['exec#high,scan,chair', 'redo'], 'explanation': 'Chair is a specific object name, so though the list is empty we can scan for it.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find a chair'}, 'output': ['exec#high,align,chair', 'exec#low,move_forward,50'], 'explanation': 'Chair is in the list, align and approach it.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[Q] is there anything edible?'}, 'output': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'input': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'command': '[A] goto the apple'}, 'output': ['exec#high,align,apple', 'exec#low,move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'input': {'objects': ['chair', 'laptop'], 'command': '[A] find something edible'}, 'output': ['exec#low,turn_ccw,45', 'redo'], 'explanation': 'Something edible is not a specific object name, so the planner will turn around and do query with a new object list.'}].
Then this is the user input: {'objects': ['person', 'bottle', 'apple'], 'command': '[A] Find something I can eat.'}, please generate the output command without explanation.
##################################
{"id": "chatcmpl-83w7bTr5dRKjfJuL9xT0hO2DJl36q", "object": "chat.completion", "created": 1695949095, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#high,scan,apple', 'redo']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1418, "completion_tokens": 12, "total_tokens": 1430}}
##################################
