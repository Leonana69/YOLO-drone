You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'laptop', 'loc_x': 0.0, 'loc_y': 0.6, 'size_x': 0.05, 'size_y': 0.37}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[Q] is there a person insight?'}
##################################
{"id": "chatcmpl-86rYOtARXHW724QgTOH4gY8AU0YFw", "object": "chat.completion", "created": 1696646520, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['str#Yes, there is a person in sight.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1508, "completion_tokens": 12, "total_tokens": 1520}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'laptop', 'loc_x': 0.0, 'loc_y': 0.6, 'size_x': 0.05, 'size_y': 0.37}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[Q] is there a person insight?'}
Response: ['str#Yes, there is a person in sight.']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}]

Is the user's command satisfied? Please generate the answer as a string command like ["str#Yes, there is an apple and a lemon in sight."]

##################################
{"id": "chatcmpl-86rYS5Aan4YIdyIAM1CsZugusJfI7", "object": "chat.completion", "created": 1696646524, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "[\"str#Yes, there is a person in sight.\"]"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1598, "completion_tokens": 12, "total_tokens": 1610}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.6, 'size_y': 0.83}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[A] find something drinkable'}
##################################
{"id": "chatcmpl-86rYioMv1W4CQx8yAgFGk9pMrYLVf", "object": "chat.completion", "created": 1696646540, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1463, "completion_tokens": 8, "total_tokens": 1471}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.7, 'size_x': 0.5, 'size_y': 0.67}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.08, 'size_y': 0.1}], 'text': '[A] find something for drink'}
##################################
{"id": "chatcmpl-86rZ8BfZKssTmhmnkqEgXOMJmYObf", "object": "chat.completion", "created": 1696646566, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1463, "completion_tokens": 8, "total_tokens": 1471}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.7, 'size_x': 0.38, 'size_y': 0.6}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.8, 'size_x': 0.09, 'size_y': 0.1}], 'text': '[A] find something for drink'}
##################################
{"id": "chatcmpl-86rcqrJAXLRG6UO4mmKWHwJEcwZph", "object": "chat.completion", "created": 1696646796, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1503, "completion_tokens": 8, "total_tokens": 1511}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.66, 'size_y': 0.76}, {'name': 'bottle', 'loc_x': 0.8, 'loc_y': 0.6, 'size_x': 0.15, 'size_y': 0.79}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-86rdFDZjGaqSjzNabd2lXcLE7iscP", "object": "chat.completion", "created": 1696646821, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "False"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 186, "completion_tokens": 1, "total_tokens": 187}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.68, 'size_y': 0.88}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.9, 'size_x': 0.25, 'size_y': 0.26}, {'name': 'person', 'loc_x': 0.7, 'loc_y': 0.7, 'size_x': 0.04, 'size_y': 0.08}], 'text': '[A] find something to eat'}
##################################
{"id": "chatcmpl-86riPdD5pn0oRvwuxjJuZ71CTNSXn", "object": "chat.completion", "created": 1696647141, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#find_edible_obj']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1542, "completion_tokens": 8, "total_tokens": 1550}}
##################################
I will provide you with a list of object details, and you must respond to the subsequent question using the information provided. Kindly ensure your answer is either 'True' or 'False'.
Object info: [{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.87}, {'name': 'donut', 'loc_x': 0.6, 'loc_y': 0.7, 'size_x': 0.15, 'size_y': 0.29}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}]
Question: 'is there anything edible?'
##################################
{"id": "chatcmpl-86rireiC0gigY3obxE42Al7KkViFo", "object": "chat.completion", "created": 1696647169, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "True"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 186, "completion_tokens": 1, "total_tokens": 187}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.68, 'size_y': 0.88}, {'name': 'chair', 'loc_x': 0.8, 'loc_y': 0.9, 'size_x': 0.25, 'size_y': 0.26}, {'name': 'person', 'loc_x': 0.7, 'loc_y': 0.7, 'size_x': 0.04, 'size_y': 0.08}], 'text': '[A] find something to eat'}
Response: ['exec#find_edible_obj']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.86}, {'name': 'donut', 'loc_x': 0.6, 'loc_y': 0.7, 'size_x': 0.15, 'size_y': 0.24}, {'name': 'person', 'loc_x': 0.6, 'loc_y': 0.6, 'size_x': 0.3, 'size_y': 0.46}]

Is the user's command satisfied?

##################################
{"id": "chatcmpl-86ritH5kKvm41EZPeLORiv1zWg2XD", "object": "chat.completion", "created": 1696647171, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "Yes"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1688, "completion_tokens": 1, "total_tokens": 1689}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rmskcX5dcE33PIqiYWideJhx9rL", "object": "chat.completion", "created": 1696647418, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 9, "total_tokens": 1552}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.62, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}, {'name': 'chair', 'loc_x': 0.7, 'loc_y': 0.9, 'size_x': 0.23, 'size_y': 0.25}]

Is the user's command satisfied? Please answer the question in the following format:
['result': True/False, 'feedback': 'your feedback'].

##################################
{"id": "chatcmpl-86rmv86Dxw72gApmHpoFnDEkIzZHP", "object": "chat.completion", "created": 1696647421, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['result': True, 'feedback': 'The drone successfully executed the command to turn around.']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1758, "completion_tokens": 19, "total_tokens": 1777}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rncmLkKru9g5RDIITPVjCgoru1P", "object": "chat.completion", "created": 1696647464, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['loop#8#2', 'exec#turn_ccw,45']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 16, "total_tokens": 1559}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.66, 'size_y': 0.86}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86roMar8qsisLANmYEzO9BIbcSIBm", "object": "chat.completion", "created": 1696647510, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1501, "completion_tokens": 9, "total_tokens": 1510}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.63, 'size_y': 0.86}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] \x1b[A'}
##################################
{"id": "chatcmpl-86rotS2fUhEdnK3QnZMsUd5zXOLPd", "object": "chat.completion", "created": 1696647543, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "The user's command seems to be incomplete or corrupted as '[A] \\x1b[A' doesn't provide any clear instruction. In this case, the drone should ask for clarification. The response should be: ['str#Could you please provide more details or clarify your command?']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1546, "completion_tokens": 58, "total_tokens": 1604}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.65, 'size_y': 0.86}, {'name': 'sink', 'loc_x': 0.0, 'loc_y': 0.9, 'size_x': 0.04, 'size_y': 0.1}, {'name': 'teddy_bear', 'loc_x': 0.3, 'loc_y': 0.5, 'size_x': 0.08, 'size_y': 0.09}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rp5YH0g8I9XESebvPnAtj9dk823", "object": "chat.completion", "created": 1696647555, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1543, "completion_tokens": 9, "total_tokens": 1552}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Given the user's query, please generate the response string only according to the above information:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}], 'text': '[A] turn around'}
##################################
{"id": "chatcmpl-86rqC46i9qQBjCUpfImiEFzcDdOuJ", "object": "chat.completion", "created": 1696647624, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "['exec#turn_ccw,180']"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1456, "completion_tokens": 9, "total_tokens": 1465}}
##################################
You are a drone pilot and you should follow the user's command to generate a task plan based on the description of the drone's skills and the user's query.
The drone's skills have two types, low-level and high-level. Low-level skills, while fixed, offer direct function calls to control the drone and acquire vision information. High-level skills, built using low-level skills and logic blocks, provide complex functionalities.

Description of the two skill sets:
- High-level tools: Skill(name: find, skill_str_list: ['loop#8#4', 'if#is_in_sight,$1,=,True#1', 'return#true', 'exec#turn_ccw,45', 'delay#300', 'return#false'], args: [obj_name: str], comment: rotate to find a certain object)
Skill(name: orienting, skill_str_list: ['loop#4#7', 'if#obj_loc_x,$1,>,0.6#1', 'exec#turn_cw,15', 'if#obj_loc_x,$1,<,0.4#1', 'exec#turn_ccw,15', 'if#obj_loc_x,$1,<,0.6#2', 'if#obj_loc_x,$1,>,0.4#1', 'return#true', 'return#false'], args: [obj_name: str], comment: align the object to the center of the frame by rotating the drone)
Skill(name: centering_y, skill_str_list: ['loop#4#7', 'if#obj_loc_y,$1,<,0.4#1', 'exec#move_up,20', 'if#obj_loc_y,$1,>,0.6#1', 'exec#move_down,20', 'if#obj_loc_y,$1,>,0.4#2', 'if#obj_loc_y,$1,<,0.6#1', 'return#true', 'return#false'], args: [obj_name: str], comment: center the object's y location in the frame by moving the drone up or down)
Skill(name: find_edible_obj, skill_str_list: ['loop#8#3', 'exec#turn_ccw,45', "if#query,'is there anything edible?',=,True#2", 'return#true', 'return#false'], args: [], comment: find an edible object)
,
- Low-level tools: Skill(name: move_forward, args: [distance: int], comment: Move drone forward by a distance)
Skill(name: move_backward, args: [distance: int], comment: Move drone backward by a distance)
Skill(name: move_left, args: [distance: int], comment: Move drone left by a distance)
Skill(name: move_right, args: [distance: int], comment: Move drone right by a distance)
Skill(name: move_up, args: [distance: int], comment: Move drone up by a distance)
Skill(name: move_down, args: [distance: int], comment: Move drone down by a distance)
Skill(name: turn_ccw, args: [degree: int], comment: Turn drone counter clockwise by a degree)
Skill(name: turn_cw, args: [degree: int], comment: Turn drone clockwise by a degree)
Skill(name: is_in_sight, args: [obj_name: str], comment: Check if an object is in sight)
Skill(name: obj_loc_x, args: [obj_name: str], comment: Get x location of an object)
Skill(name: obj_loc_y, args: [obj_name: str], comment: Get y location of an object)
Skill(name: query, args: [question: str], comment: Query the LLM to check the environment state)
.

The user's query consists of the environment description and a text command. The environment description is an object list. You can further use low-level skills to get their binding boxes and colors. The text command is a natural language string that may start with "[A]" or "[Q]". "[A]" strings mean you should generate an execution plan for the drone. "[Q]" strings mean you should give a literal answer.

When generating the plan, please follow these rules:
1. Carefully consider every object in the environment description, they are highly related to the user's command.
2. Use high-level skills as much as possible.
3. If no proper high-level skill is available, try to generate a new high-level skill.
3. If you need more clarification, ask the user.
4. The `object_name` argument of skill should be obtained from the object list.
5. Carefully consider user's command, for example, "teddy" and "teddy bear" are the same object, however, something for drink and something for eat are different objects.

Here are some examples of user queries, the ideal generated responses, and their explanations:
[{'query': {'objects': [], 'text': '[A] find a chair'}, 'response': ['if#find,chair,=,True#2', 'exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is not in the list, so the planner first try to find a chair. If it is found, align and approach it.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find a chair'}, 'response': ['exec#orienting,chair', 'exec#move_forward,50'], 'explanation': 'Chair is in the list, just align and approach it.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[Q] is there anything edible?'}, 'response': ['str#Yes, there is an apple and a lemon in sight.'], 'explanation': 'This is a query problem, so the planner will return a string to answer the question.'}, {'query': {'objects': ['apple', 'chair', 'laptop', 'lemon'], 'text': '[A] goto the apple'}, 'response': ['exec#orienting,apple', 'exec#move_forward,50'], 'explanation': 'The apple is in the list, the planner will align the apple to the center of the frame and move forward.'}, {'query': {'objects': ['chair', 'laptop'], 'text': '[A] find something edible'}, 'response': ['exec#find_edible_obj'], 'explanation': 'There is no edible object in the list, so the planner will find an edible object first.'}]

Here is the user's query and your generated response:
Query: {'objects': [{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.67, 'size_y': 0.87}], 'text': '[A] turn around'}
Response: ['exec#turn_ccw,180']

Here is the current environment description:
[{'name': 'person', 'loc_x': 0.5, 'loc_y': 0.6, 'size_x': 0.64, 'size_y': 0.87}]

Is the user's command satisfied? Please answer the question in the following format:
{'result': True/False, 'feedback': 'your feedback'}

##################################
{"id": "chatcmpl-86rqEUncncvI8IGpo0cdaDEw8vmbX", "object": "chat.completion", "created": 1696647626, "model": "gpt-4-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "{'result': True, 'feedback': 'The drone successfully executed the command to turn around.'}"}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1541, "completion_tokens": 20, "total_tokens": 1561}}
##################################
